This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
__tests__/
  api/
    video/
      upload.test.ts
  components/
    ui/
      features.test.tsx
      header.test.tsx
  setup/
    mocks.ts
    test-helpers.tsx
  test-utils.tsx
ai_docs/
  ARC_PROMPT_REQUESTS_PAGE.md
  DEVELOPER_GUIDELINES.md
  scratchpad.md
app/
  about/
    page.tsx
  api/
    lessons/
      route.ts
    mux/
      playback-id/
        route.ts
    video/
      upload/
        route.ts
  components/
    ui/
      lesson-form.tsx
  legal/
    page.tsx
  lessons/
    [id]/
      lesson-detail.tsx
      page.tsx
    new/
      page.tsx
    page.tsx
  globals.css
  layout.tsx
  page.tsx
auth/
  AuthContext.tsx
  supabaseAuth.ts
components/
  ui/
    accordion.tsx
    animated-hero.tsx
    button.tsx
    card.tsx
    checkbox.tsx
    dialog.tsx
    dropdown-menu.tsx
    email-signup.tsx
    features.tsx
    footer.tsx
    form.tsx
    header.tsx
    icons.tsx
    input.tsx
    label.tsx
    lesson-form.tsx
    navigation-menu.tsx
    progress.tsx
    select.tsx
    sign-in.tsx
    sign-up.tsx
    switch.tsx
    textarea.tsx
    theme-toggle.tsx
    toast.tsx
    toaster.tsx
    use-toast.tsx
    video-player.tsx
    video-status.tsx
    video-uploader.tsx
  providers.tsx
lib/
  mux.ts
  supabase.ts
  utils.ts
.gitignore
components.json
env.template
eslint.config.mjs
jest.config.js
jest.config.ts
jest.setup.ts
next.config.ts
package.json
postcss.config.mjs
README.md
tailwind.config.ts
tsconfig.json
vercel.json

================================================================
Files
================================================================

================
File: __tests__/api/video/upload.test.ts
================
import { NextResponse } from 'next/server';
import { createUpload } from '@/lib/mux';
import { headers } from 'next/headers';
import { POST, PUT, OPTIONS } from '@/app/api/video/upload/route';
import fs from 'fs';
import path from 'path';

// Mock Next.js runtime
const originalGlobal = global;
(global as any).Request = class MockRequest {
  constructor() {}
};

// Mock the next/headers module
jest.mock('next/headers', () => ({
  headers: jest.fn(() => ({
    get: (key: string) => {
      const headers = {
        'origin': 'http://localhost:3000',
        'method': 'POST',
        'content-type': 'video/mp4',
        'content-length': '1000000',
        'content-range': 'bytes 0-999999/2000000',
        'authorization': 'Bearer test-token'
      };
      return headers[key.toLowerCase()] || null;
    }
  }))
}));

// Mock NextResponse
jest.mock('next/server', () => ({
  NextResponse: {
    json: jest.fn((body, init) => ({
      status: init?.status || 200,
      headers: new Headers(init?.headers || {}),
      json: async () => body
    }))
  }
}));

// Mock the Mux client
jest.mock('@/lib/mux', () => ({
  createUpload: jest.fn()
}));

describe('Video Upload API', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('should handle successful upload initialization', async () => {
    const mockUploadResponse = {
      url: 'https://mock-upload-url.mux.com',
      id: 'mock-asset-id'
    };
    
    (createUpload as jest.Mock).mockResolvedValueOnce(mockUploadResponse);

    const response = await POST();
    const data = await response.json();

    expect(response.status).toBe(200);
    expect(data).toEqual({
      uploadUrl: mockUploadResponse.url,
      assetId: mockUploadResponse.id
    });
  });

  it('should handle upload initialization failure', async () => {
    const mockError = new Error('Mux API error');
    (createUpload as jest.Mock).mockRejectedValueOnce(mockError);

    const response = await POST();
    const data = await response.json();

    expect(response.status).toBe(500);
    expect(data.error).toBe('Failed to initialize video upload. Please try again.');
    expect(data.details).toBe('Mux API error');
  });

  it('should handle OPTIONS request', async () => {
    const response = await OPTIONS();

    expect(response.status).toBe(204);
    const headers = new Headers(response.headers);
    expect(headers.get('Access-Control-Allow-Origin')).toBe('http://localhost:3000');
    expect(headers.get('Access-Control-Allow-Methods')).toBe('POST, PUT, OPTIONS');
    expect(headers.get('Access-Control-Allow-Headers')).toBe('Content-Type, Content-Length, Content-Range, Authorization, X-Mux-Upload-Url');
  });

  it('should handle PUT request for chunk upload', async () => {
    const mockRequest = new Request('http://localhost:3000/api/video/upload', {
      method: 'PUT',
      headers: {
        'content-type': 'video/mp4',
        'content-length': '1000000',
        'content-range': 'bytes 0-999999/2000000',
        'x-mux-upload-url': 'https://mock-upload-url.mux.com'
      },
      body: new Uint8Array(1000000)
    });

    global.fetch = jest.fn().mockResolvedValueOnce({
      ok: true,
      status: 308,
      statusText: 'Resume Incomplete'
    });

    const response = await PUT(mockRequest);
    const data = await response.json();

    expect(response.status).toBe(308);
    expect(data).toEqual({ status: 'processing' });
  });

  it('should handle complete video file upload', async () => {
    const mockRequest = new Request('http://localhost:3000/api/video/upload', {
      method: 'PUT',
      headers: {
        'content-type': 'video/mp4',
        'content-length': '1000000',
        'content-range': 'bytes 0-999999/1000000',
        'x-mux-upload-url': 'https://mock-upload-url.mux.com'
      },
      body: new Uint8Array(1000000)
    });

    global.fetch = jest.fn().mockResolvedValueOnce({
      ok: true,
      status: 200,
      statusText: 'OK'
    });

    const response = await PUT(mockRequest);
    const data = await response.json();

    expect(response.status).toBe(200);
    expect(data).toEqual({ status: 'complete' });
  });
});

================
File: __tests__/components/ui/features.test.tsx
================
import { render, screen, act } from '../../test-utils'
import { Features } from '@/components/ui/features'
import { supabase } from '@/lib/supabase'

// Mock Supabase auth
jest.mock('@/lib/supabase', () => ({
  supabase: {
    auth: {
      onAuthStateChange: jest.fn((callback) => {
        callback('SIGNED_OUT', null)
        return { data: { subscription: { unsubscribe: jest.fn() } } }
      })
    }
  }
}))

describe('Features', () => {
  it('renders the features section', async () => {
    await act(async () => {
      render(<Features />)
    })
    
    // Check for the main heading
    expect(screen.getByText('Why Choose Teach Niche?')).toBeInTheDocument()
    
    // You can add more specific tests based on your features content
  })
})

================
File: __tests__/components/ui/header.test.tsx
================
import { render, screen, fireEvent } from '@testing-library/react'
import { usePathname } from 'next/navigation'
import { Header } from '@/components/ui/header'
import userEvent from '@testing-library/user-event'

// Mock next/navigation
jest.mock('next/navigation', () => ({
  usePathname: jest.fn()
}))

// Mock components
jest.mock('@/components/ui/theme-toggle', () => ({
  ThemeToggle: () => <button aria-label="toggle theme">Toggle Theme</button>
}))

// Mock next/link
jest.mock('next/link', () => {
  return ({ children, href }: { children: React.ReactNode; href: string }) => (
    <a href={href}>{children}</a>
  )
})

describe('Header', () => {
  beforeEach(() => {
    (usePathname as jest.Mock).mockReturnValue('/')
  })

  describe('rendering', () => {
    it('renders the logo', () => {
      render(<Header />)
      expect(screen.getByText('Teach Niche')).toBeInTheDocument()
    })

    it('renders navigation items', () => {
      render(<Header />)
      expect(screen.getByText('Home')).toBeInTheDocument()
      expect(screen.getByText('About')).toBeInTheDocument()
    })

    it('renders theme toggle', () => {
      render(<Header />)
      expect(screen.getByRole('button', { name: /toggle theme/i })).toBeInTheDocument()
    })

    it('renders call-to-action buttons', () => {
      render(<Header />)
      expect(screen.getByText('Learn More')).toBeInTheDocument()
      expect(screen.getByText('Join Teacher Waitlist')).toBeInTheDocument()
    })
  })

  describe('mobile menu', () => {
    it('shows mobile menu when hamburger is clicked', async () => {
      render(<Header />)
      const menuButton = screen.getByRole('button', { name: '' }) // Hamburger button
      await userEvent.click(menuButton)
      
      // Check if mobile menu items are visible
      expect(screen.getAllByText('Learn More')[0]).toBeVisible()
      expect(screen.getAllByText('Join Teacher Waitlist')[0]).toBeVisible()
    })

    it('closes mobile menu when X button is clicked', async () => {
      render(<Header />)
      const menuButton = screen.getByRole('button', { name: '' })
      await userEvent.click(menuButton)
      
      const closeButton = screen.getByRole('button', { name: '' })
      await userEvent.click(closeButton)
      
      // Menu should be closed
      expect(screen.queryByRole('navigation')).not.toBeVisible()
    })
  })

  describe('navigation', () => {
    it('scrolls to email signup when on home page', async () => {
      // Mock scrollIntoView
      const mockScrollIntoView = jest.fn()
      window.HTMLElement.prototype.scrollIntoView = mockScrollIntoView;
      
      (usePathname as jest.Mock).mockReturnValue('/')
      
      render(<Header />)
      const waitlistButton = screen.getByText('Join Teacher Waitlist')
      await userEvent.click(waitlistButton)
      
      expect(mockScrollIntoView).toHaveBeenCalledWith({ behavior: 'smooth' })
    })

    it('redirects to home page email signup when on different page', async () => {
      // Mock window.location
      const mockAssign = jest.fn()
      Object.defineProperty(window, 'location', {
        value: { href: mockAssign },
        writable: true
      });
      
      (usePathname as jest.Mock).mockReturnValue('/about')
      
      render(<Header />)
      const waitlistButton = screen.getByText('Join Teacher Waitlist')
      await userEvent.click(waitlistButton)
      
      expect(window.location.href).toBe('/#email-signup')
    })
  })
})

================
File: __tests__/setup/mocks.ts
================
export const createMockUser = () => ({
  id: 'test-user-id',
  email: 'test@example.com',
  user_metadata: {
    full_name: 'Test User'
  }
});

export const mockSupabaseClient = {
  auth: {
    signIn: jest.fn(),
    signOut: jest.fn(),
    onAuthStateChange: jest.fn()
  },
  from: jest.fn(() => ({
    select: jest.fn().mockReturnThis(),
    insert: jest.fn().mockReturnThis(),
    update: jest.fn().mockReturnThis(),
    delete: jest.fn().mockReturnThis()
  }))
};

================
File: __tests__/setup/test-helpers.tsx
================
import { screen } from '@testing-library/react'
import userEvent from '@testing-library/user-event'
import { render } from '../test-utils'

export const findByTextWithMarkup = (text: string) => {
  return screen.getByText((content, node) => {
    const hasText = (node: Element) => node.textContent === text
    const nodeHasText = node ? hasText(node) : false
    const childrenDontHaveText = Array.from(node?.children || []).every(
      child => !hasText(child as Element)
    )
    return nodeHasText && childrenDontHaveText
  })
}

export const setup = (jsx: React.ReactElement) => {
  return {
    user: userEvent.setup(),
    ...render(jsx)
  }
}

export const waitForLoadingToFinish = () =>
  screen.findByTestId('loading-complete')

================
File: __tests__/test-utils.tsx
================
import React from 'react'
import { render as rtlRender } from '@testing-library/react'
import { Providers } from '@/components/providers'
import { AuthProvider } from '@/auth/AuthContext'

interface CustomRenderOptions {
  withAuth?: boolean
  providerProps?: Parameters<typeof Providers>[0]
}

function render(
  ui: React.ReactElement,
  { withAuth = false, providerProps, ...options }: CustomRenderOptions = {}
) {
  const Wrapper = ({ children }: { children: React.ReactNode }) => {
    let wrapped = (
      <Providers
        attribute="class"
        defaultTheme="dark"
        enableSystem
        disableTransitionOnChange
        {...providerProps}
      >
        {children}
      </Providers>
    )

    if (withAuth) {
      wrapped = <AuthProvider>{wrapped}</AuthProvider>
    }

    return wrapped
  }

  return rtlRender(ui, { wrapper: Wrapper, ...options })
}

export * from '@testing-library/react'
export { render }

================
File: ai_docs/ARC_PROMPT_REQUESTS_PAGE.md
================
Implement this plan:

# Lesson Requests Feature Implementation Plan

## HIGH LEVEL OBJECTIVES
1. Create public lesson request browsing system
2. Implement dual-mode request creation (anonymous/authenticated)
3. Establish request management interface
4. Set up notification/communication system
5. Implement voting/ranking system for requests
6. Create directory view with sorting options

## MID LEVEL OBJECTIVES
1. Public Browsing System
   - Public requests listing page
   - Search/filter functionality
   - Request detail views
   
2. Request Creation
   - Anonymous request form
   - Enhanced authenticated user form
   - Form validation system
   
3. Database Structure
   - Lesson requests table
   - User relationships
   - Anonymous request handling

4. Voting System
   - Vote up/down functionality
   - Vote tracking per user
   - Vote-based sorting
   
5. Directory View
   - Grid/List view toggle
   - Sort by (newest, most voted, trending)
   - Category/tag filtering

## FILE STRUCTURE

### Files Needed Before Implementation
- app/layout.tsx (existing)
- components/ui/button.tsx (existing)
- components/ui/card.tsx (existing)
- components/ui/form.tsx (existing)
- components/ui/input.tsx (existing)
- components/ui/textarea.tsx (existing)
- components/providers.tsx (existing)
- lib/supabase.ts (existing)
- lib/utils.ts (existing)
- auth/AuthContext.tsx (existing)

### Files To Be Created/Modified

/app
  /requests
    /page.tsx             # Main requests directory page
    /[id]/page.tsx        # Individual request view
    /new/page.tsx         # Create new request page
    /loading.tsx          # Loading state
    /error.tsx            # Error state

/components/requests
  /RequestCard.tsx        # Card component for request in grid view
  /RequestList.tsx        # List view component
  /RequestForm.tsx        # Form for creating/editing requests
  /RequestVoteButton.tsx  # Vote interaction component
  /RequestFilters.tsx     # Filter and sort controls
  /RequestGrid.tsx        # Grid view component
  /RequestStats.tsx       # Shows votes and other metrics

/lib
  /requests
    /types.ts            # Request-related type definitions
    /api.ts              # Request API utilities
    /validation.ts       # Request form validation schemas

/hooks
  /useRequests.ts        # Hook for fetching requests
  /useVoting.ts          # Hook for vote interactions
  /useRequestFilters.ts  # Hook for managing filters/sorting

/api/requests
  /route.ts              # Main requests API endpoint
  /[id]/route.ts         # Individual request endpoint
  /vote/route.ts         # Voting endpoint

/__tests__
  /components/requests   # Test files for request components
  /api/requests         # Test files for request API endpoints


## Database Schema

### Lesson Requests Table
```sql
create table lesson_requests (
  id uuid default uuid_generate_v4() primary key,
  title text not null,
  description text not null,
  created_at timestamp with time zone default now(),
  user_id uuid references auth.users,
  status text default 'open' check (status in ('open', 'in_progress', 'completed')),
  vote_count integer default 0,
  category text,
  tags text[]
);

-- Enable RLS
alter table lesson_requests enable row level security;

-- Policies
create policy "Requests are viewable by everyone"
  on lesson_requests for select
  to anon, authenticated
  using (true);

create policy "Authenticated users can create requests"
  on lesson_requests for insert
  to authenticated
  using (auth.uid() = user_id);

create policy "Users can update their own requests"
  on lesson_requests for update
  to authenticated
  using (auth.uid() = user_id);
```

### Request Votes Table
```sql
create table request_votes (
  id uuid default uuid_generate_v4() primary key,
  request_id uuid references lesson_requests(id) on delete cascade,
  user_id uuid references auth.users(id) on delete cascade,
  vote_type text check (vote_type in ('up', 'down')),
  created_at timestamp with time zone default now(),
  unique(request_id, user_id)
);

-- Indexes
create index idx_request_votes_request_id on request_votes(request_id);
create index idx_request_votes_user_id on request_votes(user_id);
create index idx_lessons_vote_count on lesson_requests(vote_count desc);
```

## KEY FEATURES OF DIRECTORY PAGE
1. Authentication gate for voting (but not for viewing)
2. Real-time vote updates
3. Sorting options:
   - Most voted (all time)
   - Trending (recent votes)
   - Newest
   - Category/tags
4. Toggle between:
   - Grid view (card-based)
   - List view (more detailed)

## IMPLEMENTATION STEPS

## SECURITY & PERFORMANCE

### Supabase RLS Policies
```sql
-- Allow anyone to read requests
create policy "Requests are viewable by everyone"
on lesson_requests for select
to anon, authenticated
using (true);

-- Only authenticated users can create requests
create policy "Authenticated users can create requests"
on lesson_requests for insert
to authenticated
using (true);

-- Only vote table access for authenticated users
create policy "Only authenticated users can vote"
on request_votes for all
to authenticated
using (true);
```

### Rate Limiting
Location: `src/middleware.ts`
```typescript
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'
import { rateLimit } from './lib/utils/rate-limit'

const limiter = rateLimit({
  interval: 60 * 1000, // 1 minute
  uniqueTokenPerInterval: 500
})

export async function middleware(request: NextRequest) {
  if (request.nextUrl.pathname.startsWith('/api/requests')) {
    try {
      await limiter.check(request, 10) // 10 requests per minute
      return NextResponse.next()
    } catch {
      return new NextResponse('Too Many Requests', { status: 429 })
    }
  }
}
```

### Pagination
Location: `src/hooks/useRequests.ts`
```typescript
const ITEMS_PER_PAGE = 12;

export const useRequests = (page: number = 1) => {
  const { data, error, isLoading } = useSWR(
    `/api/requests?page=${page}&limit=${ITEMS_PER_PAGE}`,
    fetcher
  );
  
  return {
    requests: data?.requests ?? [],
    totalPages: Math.ceil((data?.total ?? 0) / ITEMS_PER_PAGE),
    isLoading,
    error
  };
};
```

## TESTING STRATEGY

### Unit Tests
Location: `src/components/requests/__tests__/RequestCard.test.tsx`
```typescript
import { render, screen } from '@testing-library/react'
import RequestCard from '../RequestCard'

describe('RequestCard', () => {
  it('renders request title and description', () => {
    const request = {
      title: 'Test Request',
      description: 'Test Description',
      vote_count: 0
    }
    
    render(<RequestCard request={request} />)
    
    expect(screen.getByText('Test Request')).toBeInTheDocument()
    expect(screen.getByText('Test Description')).toBeInTheDocument()
  })
})
```

Location: `src/hooks/__tests__/useVoting.test.ts`
```typescript
import { renderHook, act } from '@testing-library/react'
import { useVoting } from '../useVoting'

describe('useVoting', () => {
  it('handles upvote action', async () => {
    const { result } = renderHook(() => useVoting())
    
    await act(async () => {
      await result.current.handleVote('test-id', 'up')
    })
    
    expect(result.current.isLoading).toBe(false)
  })
})
```

### E2E Test
Location: `e2e/requests.spec.ts`
```typescript
import { test, expect } from '@playwright/test'

test('user can view and create requests', async ({ page }) => {
  await page.goto('/requests')
  await expect(page.getByTestId('requests-grid')).toBeVisible()
  
  await page.goto('/requests/create')
  await page.fill('[name="title"]', 'Test Lesson Request')
  await page.fill('[name="description"]', 'Test Description')
  await page.click('button[type="submit"]')
  
  await expect(page.getByText('Request submitted successfully')).toBeVisible()
})
```

## DEPENDENCIES TO INSTALL
```bash
npm install @testing-library/react @testing-library/jest-dom @playwright/test zod swr
```

================
File: ai_docs/DEVELOPER_GUIDELINES.md
================
# Teach Niche Developer Guide
 
 ## Core Philosophy
 
 Our development approach emphasizes:
 - **Modularity**: Each component and service has a single, well-defined responsibility
 - **Minimalism**: Keep dependencies minimal, code simple, and interfaces clean
 - **Type Safety**: Leverage TypeScript for robust, maintainable code
 - **Testing First**: Write tests before implementing features
 
 
 ## 1. Coding Standards
 
 ### 1.1. Language and Frameworks
 
 - **TypeScript:**  All code must be written in TypeScript for type safety and improved code maintainability.
 - **React:**  Use React for building UI components. Follow React best practices, focusing on functional components and hooks for simpler state management.
 - **Next.js:**  Utilize Next.js framework conventions for routing, data fetching, and API routes. Embrace Next.js's features for efficient and minimal code.
 - **Shadcn UI:**  Leverage Shadcn UI components for a consistent and modern UI. Customize components judiciously, prioritizing minimalism and avoiding unnecessary complexity.
 
 ### 1.2. Code Style
 
 - **ESLint and Prettier:**  The project should be configured with ESLint and Prettier to enforce code style and formatting, ensuring clean and consistent code with minimal stylistic variations.
 - **Clean Code Principles:**  Write clean, readable, and well-documented code. Follow SOLID principles where applicable, but prioritize simplicity and avoid over-engineering.
 - **Comments:**  Add comments to explain complex logic, non-obvious code sections, and exported functions/components. Use Google style documentation, but strive for code that is self-explanatory and minimizes the need for extensive comments.
 - **Variable and Function Naming:**  Use descriptive and meaningful names for variables and functions. Follow camelCase convention. Keep names concise and to the point.
 - **Avoid Magic Numbers:**  Use constants for numerical values with specific meanings.
 - **Minimalism in Code:** Aim for the simplest solution that solves the problem. Avoid unnecessary abstractions or overly complex patterns when a simpler approach suffices.  **Keep it simple, and avoid "gold plating".**
 
 ### 1.3. React Specific Guidelines
 
 - **Functional Components:** Prefer functional components with hooks over class components for their inherent simplicity and readability.
 - **Component Reusability and Modularity:**  Design components to be highly reusable and composable, but also **modular**. Break down complex components into smaller, focused sub-components. Each component should have a single, well-defined responsibility.
 - **State Management:**  Use React's built-in `useState` and `useContext` hooks for local and global state management respectively. Favor simple state management solutions. Consider libraries like Zustand or Recoil only if absolutely necessary for complex state management needs, and always start with the simplest approach.
 - **Prop Types:**  Define prop types for all React components using TypeScript interfaces or types to ensure type safety and clear component interfaces. Keep prop interfaces minimal and only include necessary props.
 - **Avoid Inline Styles:**  Use CSS modules or Tailwind CSS classes for styling components to maintain separation of concerns and improve maintainability.
 - **Minimize Component Logic:** Keep component logic focused on rendering UI. Extract complex logic into custom hooks or utility functions to maintain component simplicity.
 
 ## 3. Component Development
 
 - **Atomic Design Principles (with Minimalism):** Consider using Atomic Design principles (Atoms, Molecules, Organisms, Templates, Pages) to structure components for better organization and reusability. However, apply these principles with minimalism in mind. Avoid creating unnecessary layers of abstraction if a simpler component structure suffices.
 - **Shadcn UI Usage:**  Prioritize using Shadcn UI components to reduce development effort and maintain design consistency. Customize only when necessary and keep customizations minimal. Avoid creating custom components if an existing Shadcn UI component can be adapted with minimal effort.
 - **Component Modularity:**  Strive for highly modular components. Break down complex UI elements into smaller, independent, and reusable components. This promotes maintainability and reduces code duplication.
 - **Component Documentation:**  For complex or reusable components, add comments explaining their purpose, props, and usage. Keep documentation concise and focused on essential information.
 - **Accessibility (A11y):**  Ensure all components are accessible by following WCAG guidelines. Use semantic HTML, ARIA attributes where necessary, and test with screen readers. Accessibility is a core principle, but implement it efficiently and avoid adding unnecessary complexity.
 
 ## 4. Data Fetching and Management (Supabase)
 
 - **Supabase Client:**  Initialize the Supabase client in a dedicated file (e.g., `src/supabase.ts`) and export it for use throughout the application. Keep Supabase client setup minimal and straightforward.
 - **Server-Side vs. Client-Side Fetching:**  Choose the appropriate data fetching strategy based on the data and performance requirements. Use server-side rendering (SSR) or static site generation (SSG) where possible for better performance and SEO. Client-side fetching (`useEffect`, `swr`, `react-query`) is suitable for dynamic data or -specific data.  Favor simpler data fetching methods when possible.
 - **Database Interactions:**  Use Supabase client methods for database interactions. Write efficient and minimal queries. Avoid fetching unnecessary data.
 - **Data Validation:**  Validate data received from the database and  inputs to prevent errors and security vulnerabilities. Keep validation logic simple and effective.
 
 
 ## 5. Authentication and Authorization (Supabase Auth)
 
 - **Supabase Auth Client:**  Utilize Supabase Auth client for  authentication (login, logout, session management). Keep authentication implementation minimal and rely on Supabase Auth's built-in features as much as possible.
 - **Route Protection:**  Implement route protection using middleware or component-level checks to ensure only authenticated s can access protected pages. Keep route protection logic simple and efficient.
 - **Role-Based Access Control (RBAC):** If necessary, implement RBAC using Supabase's Row Level Security (RLS) or application-level checks to control access to specific features or data based on  roles. Implement RBAC only when truly needed and keep the implementation as simple as possible.
 
 ## 6. Payment Integration (Stripe Connect)
 
 - **Stripe API:**  Use the Stripe API for payment processing. Handle Stripe interactions securely, especially on the server-side (Edge Functions). Keep Stripe integration as straightforward as possible, leveraging Stripe's pre-built components and APIs.
 - **Checkout Sessions:**  Implement Stripe Checkout Sessions for a streamlined payment experience. Use the simplest checkout flow that meets the requirements.
 - **Webhook Handling:**  Set up Stripe webhook handlers in Edge Functions to securely process payment confirmations and updates. Keep webhook handlers concise and focused on essential tasks.
 - **Error Handling:**  Implement proper error handling for payment failures and edge cases. Keep error handling simple and -friendly.
 - Stipe connect capabilities with creators able to recieive payouts easily
 
 ## 7. Video Handling (Vimeo)
 
 - Vimeo API for video uploading, editing, etc. 
 
 
 
 ## 8. Environment Variables and Secrets
 
 - **`.env.local` for local development:**  Store local development environment variables in `.env.local`. Keep the number of environment variables to a minimum.
 - **Environment Variables in Vercel:**  Configure environment variables in Vercel for production and staging environments.
 - **`.env.template`:**  Provide a `.env.template` file with placeholder variables for developers to easily set up their local environment. Keep the `.env.template` minimal and only include essential variables.
 
 ## 9. Testing Standards

 ### 9.1 Test Organization
 - Place test files in `__tests__` directories adjacent to the code being tested
 - Name test files with `.test.tsx` or `.test.ts` suffix
 - Mirror the source file structure in test directories
 - One test file per source file

 ### 9.2 Testing Utilities
 We provide standard testing utilities to ensure consistency:

 - **test-utils.tsx**: Custom render function with provider wrappers
   - Use `render()` for basic component testing
   - Use `{ withAuth: true }` option when testing authenticated components
   - Customize provider props as needed

 - **setup/test-helpers.tsx**: Common testing patterns
   - Use `setup()` to get configured userEvent instance
   - Use `findByTextWithMarkup()` for complex text matching
   - Use `waitForLoadingToFinish()` for async operations

 - **setup/mocks.ts**: Standard mock objects
   - Use `createMockUser()` for consistent user data
   - Use `mockSupabaseClient` for Supabase operations

 ### 9.3 Test Structure
 Follow this pattern for component tests:
 ```typescript
 describe('ComponentName', () => {
   describe('rendering', () => {
     it('renders without crashing')
     it('renders expected elements')
   })

   describe('interactions', () => {
     it('handles user interactions')
   })

   describe('props', () => {
     it('handles all required props')
   })
 })
 ```

 ### 9.4 Testing Priorities
 1. **Critical Path Tests**
    - Authentication flows
    - Payment processes
    - Form submissions
    - Core user journeys

 2. **Component Tests**
    - Props validation
    - Rendering states
    - User interactions
    - Accessibility requirements

 3. **Hook Tests**
    - Initial state
    - State updates
    - Side effects
    - Error handling

 ### 9.5 Best Practices
 - Use Testing Library queries in this order:
   1. getByRole
   2. getByLabelText
   3. getByPlaceholderText
   4. getByText
   5. getByTestId (last resort)

 - Write user-centric tests that mirror actual usage
 - Test component behavior, not implementation
 - Use `userEvent` over `fireEvent`
 - Mock external dependencies consistently
 - Reset mocks between tests

 ### 9.6 Coverage Requirements
 - Minimum 80% coverage for:
   - Statements
   - Branches
   - Functions
   - Lines
 - 100% coverage for critical paths
 - Generate coverage reports in CI

 ### 9.7 Performance & Accessibility
 - Test component render performance
 - Include accessibility checks in component tests
 - Use axe-core for automated accessibility testing

 ### 9.8 Continuous Integration
 - All tests must pass before merge
 - Coverage reports generated on every PR
 - Performance benchmarks tracked over time
 
 ## 12. Documentation
 
 - **Code Comments:**  Write clear and concise comments in the code to explain complex logic and functionality.  Prioritize self-documenting code and minimize the need for comments.
 - **README.md:**  Maintain a comprehensive `README.md` file in the project root with project description, setup instructions, and other relevant information. Keep `README.md` concise and focused on essential information.
 - **`ai_docs/` directory:**  Use the `ai_docs/` directory for project planning documents, architecture diagrams, and other project-related documentation. Keep documentation in `ai_docs/` minimal and focused on high-level information.
 
 
 ## Architecture
 
 ### Project Structure
 ```
 /app
 ├── components/   # Reusable UI components
 ├── lib/         # Pure utility functions and types
 ├── hooks/       # Shared React hooks
 ├── api/         # API route handlers
 └── services/    # External service integrations
 ```
 
 ## Deployment
 
 - Vercel Standards Go here
 
 
 
 By adhering to these guidelines, with a strong focus on **modularity and minimalism**, we can ensure a consistent, maintainable, and high-quality codebase for the Teach Niche project.  These guidelines are living documents and should be updated as the project evolves and new best practices emerge, always keeping modularity and minimalism in mind.````

================
File: ai_docs/scratchpad.md
================
# Mux Video Integration Plan

## Overview
Integration of Mux video uploading/playback following modular architecture, existing project patterns, and TypeScript-first development approach.

## 1. Component Architecture

### File Structure
```
components/
  ui/
    video-uploader.tsx    # Main upload component with progress
    video-player.tsx      # Mux video player wrapper
    video-status.tsx      # Processing status display
    lesson-form.tsx       # Form with video section
app/
  lessons/
    new/
      page.tsx
    edit/
      [lessonId]/
        page.tsx
    api/
      video/
        upload/route.ts
        status/route.ts
```

## 2. Component Types and Interfaces

```typescript
// components/ui/video-uploader.tsx
interface VideoUploaderProps {
  onUploadComplete: (assetId: string) => void;
  onError: (error: Error) => void;
  className?: string;
}

// components/ui/video-player.tsx
interface VideoPlayerProps {
  playbackId: string;
  title: string;
  className?: string;
}

// components/ui/video-status.tsx
interface VideoStatusProps {
  status: 'pending' | 'processing' | 'ready' | 'error';
  error?: string;
  className?: string;
}

// components/ui/lesson-form.tsx
interface LessonFormProps {
  initialData?: Lesson;
  onSubmit: (data: LessonFormData) => Promise<void>;
  className?: string;
}

interface LessonFormData {
  title: string;
  description: string;
  muxAssetId?: string;
  price?: number;
}
```

## 3. Component Implementation Examples

```typescript
// components/ui/video-uploader.tsx
export function VideoUploader({ onUploadComplete, onError, className }: VideoUploaderProps) {
  const [status, setStatus] = useState<UploadStatus>('idle');
  const [progress, setProgress] = useState(0);
  
  return (
    <div className={cn("relative", className)}>
      <UploadDropzone
        endpoint="/api/video/upload"
        onUploadProgress={setProgress}
        onUploadComplete={onUploadComplete}
        onUploadError={onError}
      />
      <Progress value={progress} className="mt-2" />
      <p className="text-sm text-muted-foreground mt-1">
        {getStatusMessage(status)}
      </p>
    </div>
  );
}

// components/ui/video-player.tsx
export function VideoPlayer({ playbackId, title, className }: VideoPlayerProps) {
  return (
    <div className={cn("aspect-video rounded-lg overflow-hidden", className)}>
      <MuxPlayer
        playbackId={playbackId}
        metadata={{ video_title: title }}
        streamType="on-demand"
      />
    </div>
  );
}

// components/ui/lesson-form.tsx
export function LessonForm({ initialData, onSubmit, className }: LessonFormProps) {
  const form = useForm<LessonFormData>({
    defaultValues: initialData,
  });

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className={className}>
        <FormField
          control={form.control}
          name="title"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Title</FormLabel>
              <FormControl>
                <Input {...field} />
              </FormControl>
            </FormItem>
          )}
        />
        <VideoUploader
          onUploadComplete={(assetId) => form.setValue('muxAssetId', assetId)}
          onError={(error) => toast.error(error.message)}
        />
        <Button type="submit">Save Lesson</Button>
      </form>
    </Form>
  );
}
```

## 4. Implementation Phases

### Phase 1: Core Setup
- [ ] Add Mux dependencies
- [ ] Configure environment variables
- [ ] Set up type definitions
- [ ] Create base components structure

### Phase 2: Atomic Components
- [ ] Implement atom-level components with tests
- [ ] Add accessibility features
- [ ] Create Storybook stories
- [ ] Add error boundaries

### Phase 3: Video Management
- [ ] Implement VideoContext
- [ ] Create upload flow
- [ ] Add status polling
- [ ] Implement error handling
- [ ] Add video player integration

### Phase 4: Form Integration
- [ ] Create form components
- [ ] Add validation
- [ ] Implement save/update flow
- [ ] Add loading states

### Phase 5: Auth & Permissions
- [ ] Integrate with AuthContext
- [ ] Add permission checks
- [ ] Implement RLS policies
- [ ] Add error handling

## 5. Error Handling

### Error Boundaries
```typescript
class VideoErrorBoundary extends React.Component {
  static getDerivedStateFromError(error: Error) {
    return { hasError: true, error }
  }

  render() {
    if (this.state.hasError) {
      return <ErrorDisplay error={this.state.error} />
    }
    return this.props.children
  }
}
```

### Error States
- Upload failures (network/validation)
- Processing errors (Mux-specific)
- Permission errors
- Validation errors
- Timeout handling

## 7. Database Schema

```sql
-- Add Mux support to lessons
alter table lessons 
  add column mux_asset_id text,
  add column mux_playback_id text,
  add column video_status text default 'pending';

-- RLS Policies
alter policy "lesson_access_policy" 
  on lessons 
  using (
    auth.uid() = creator_id 
    or status = 'published'
    or exists (
      select 1 from purchases 
      where lesson_id = lessons.id 
      and user_id = auth.uid()
    )
  );

-- Status trigger
create function on_video_status_change() returns trigger as $$
begin
  if NEW.video_status = 'ready' and OLD.video_status != 'ready' then
    perform notify_lesson_ready(NEW.id);
  end if;
  return NEW;
end;
$$ language plpgsql;
```

## 8. Performance Optimization

### Lazy Loading
```typescript
const VideoPlayer = dynamic(() => import('./VideoPlayer'), {
  loading: () => <VideoPlayerSkeleton />,
  ssr: false
})
```

### Caching Strategy
- Cache video metadata
- Implement stale-while-revalidate
- Use Next.js ISR for lesson pages

## 9. Security Measures
- Implement upload URL signing
- Add file type validation
- Set size limits
- Configure CORS
- Add rate limiting
- Implement proper auth checks

## 10. Monitoring
- Track upload success rates
- Monitor processing times
- Watch error patterns
- Track performance metrics
- Monitor quota usage

## Dependencies
```bash
npm install @mux/mux-node @mux/mux-player-react @mux/mux-uploader-react
```

## Environment Variables
```
MUX_TOKEN_ID=your_token_id
MUX_TOKEN_SECRET=your_token_secret
NEXT_PUBLIC_MUX_ENV_KEY=your_env_key
```

================
File: app/about/page.tsx
================
import Image from "next/image"
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "../../components/ui/accordion"

export default function AboutPage() {
  return (
    <div>
      <div className="relative h-[400px] w-full mb-16">
        <div className="absolute inset-0">
          <Image
            src="/303_group.png"
            alt="303 Kendama Group"
            fill
            className="object-cover filter grayscale"
          />
          <div className="absolute inset-0 bg-black/50" />
        </div>
      </div>
      <div className="container mx-auto px-4 py-8">
      <div className="max-w-4xl mx-auto">
        <h1 className="text-4xl font-bold mb-8 text-center">About Teach Niche</h1>
        
        <div className="space-y-8">
          <section className="bg-muted rounded-lg p-8 my-8 border-l-4 border-orange-500">
            <h2 className="text-2xl font-semibold mb-4 text-orange-500">Our Mission</h2>
            <p className="text-lg leading-relaxed">
              The mission of Teach Niche is to create a space within the kendama community for players of all 
              skill levels to share knowledge, support one another, and hone their abilities. Teach Niche 
              places the community first and is dedicated to fostering growth, creating connections, and 
              promoting more financial sustainability for the kendama community.
            </p>
          </section>

          <section className="prose prose-lg max-w-none bg-card rounded-lg p-8 border-r-4 border-orange-500">
            <h2 className="text-2xl font-semibold mb-4 text-orange-500">Our Story</h2>
            <p className="text-lg leading-relaxed mb-4">
              Hello! I&apos;m Jaymin West, the founder of Teach Niche. I&apos;ve played kendama for over seven years, 
              and in that time, I&apos;ve been fortunate enough to sesh with players from all over the world and 
              have tried to form Teach Niche to fit the values of the kendama community as a whole.
            </p>
            <p className="text-lg leading-relaxed">
              Teach Niche was born from a simple idea: to help kendama players make a living from what they love.
            </p>
          </section>

          <div className="grid md:grid-cols-2 gap-8 my-8">
            <div className="bg-card rounded-lg p-6 shadow-sm">
              <h3 className="text-xl font-semibold mb-3">For Kendama Players</h3>
              <ul className="space-y-2">
                <li className="flex items-start">
                  <span className="text-orange-500 mr-2">•</span>
                  Create and sell custom courses
                </li>
                <li className="flex items-start">
                  <span className="text-primary mr-2">•</span>
                  Build your teaching brand
                </li>
                <li className="flex items-start">
                  <span className="text-primary mr-2">•</span>
                  Connect with motivated students
                </li>
              </ul>
            </div>

            <div className="bg-card rounded-lg p-6 shadow-sm">
              <h3 className="text-xl font-semibold mb-3">For Students</h3>
              <ul className="space-y-2">
                <li className="flex items-start">
                  <span className="text-primary mr-2">•</span>
                  Access quality educational content
                </li>
                <li className="flex items-start">
                  <span className="text-primary mr-2">•</span>
                  Learn at your own pace
                </li>
                <li className="flex items-start">
                  <span className="text-primary mr-2">•</span>
                  Connect with expert educators
                </li>
              </ul>
            </div>
          </div>

          <section className="my-12">
            <h2 className="text-2xl font-semibold mb-6">Learn More About Teach Niche</h2>
            <Accordion type="single" collapsible className="w-full">
              <AccordionItem value="values">
                <AccordionTrigger>Values</AccordionTrigger>
                <AccordionContent>
                  <div className="space-y-4 pt-2">
                    <div>
                      <h4 className="font-semibold mb-1">Community Collaboration</h4>
                      <p>Teach Niche fosters a space where kendama players of all levels can connect, share, and grow together.</p>
                    </div>
                    <div>
                      <h4 className="font-semibold mb-1">Growth and Learning</h4>
                      <p>The platform is committed to continuous improvement, both in skills and as a community resource.</p>
                    </div>
                    <div>
                      <h4 className="font-semibold mb-1">Integrity and Fairness</h4>
                      <p>Teach Niche operates with transparency and ensures equitable opportunities for all community members.</p>
                    </div>
                    <div>
                      <h4 className="font-semibold mb-1">Sustainability</h4>
                      <p>The platform supports long-term growth for kendama enthusiasts and professionals alike.</p>
                    </div>
                  </div>
                </AccordionContent>
              </AccordionItem>

              <AccordionItem value="why">
                <AccordionTrigger>Why Teach Niche?</AccordionTrigger>
                <AccordionContent>
                  <div className="grid sm:grid-cols-2 gap-6 pt-2">
                    <div>
                      <h4 className="font-semibold mb-1">💪 Empowerment</h4>
                      <p>Teach Niche believes that top players should have the opportunity to benefit financially from their skills and knowledge.</p>
                    </div>
                    <div>
                      <h4 className="font-semibold mb-1">🎓 Education</h4>
                      <p>The platform offers a diverse range of tutorials, from mastering specific tricks to improving competition performance and developing consistency.</p>
                    </div>
                    <div>
                      <h4 className="font-semibold mb-1">🌱 Community Growth</h4>
                      <p>By supporting each other, Teach Niche aims to elevate the entire kendama community, breaking the notion that kendama is &apos;just a hobby.&apos;</p>
                    </div>
                    <div>
                      <h4 className="font-semibold mb-1">🤝 Community-Driven Development</h4>
                      <p>Teach Niche is built to grow and evolve according to the needs and feedback of the community.</p>
                    </div>
                  </div>
                </AccordionContent>
              </AccordionItem>

              <AccordionItem value="commission">
                <AccordionTrigger>Commission Structure</AccordionTrigger>
                <AccordionContent>
                  <div className="space-y-4 pt-2">
                    <p>Teach Niche is committed to transparency and fairness in its operations. To sustain the platform and continue providing value to the community, Teach Niche charges a 15% commission on each transaction.</p>
                    <ul className="list-disc pl-5 space-y-2">
                      <li><span className="font-semibold">Fairness to Creators:</span> Creators retain 85% of their earnings from each sale.</li>
                      <li><span className="font-semibold">Platform Sustainability:</span> The commission helps cover operational costs like hosting, development, and customer support, ensuring the platform remains available and continuously improving.</li>
                      <li><span className="font-semibold">Community Investment:</span> By supporting the platform, users contribute to a sustainable ecosystem that benefits all members of the kendama community.</li>
                    </ul>
                  </div>
                </AccordionContent>
              </AccordionItem>

              <AccordionItem value="opensource">
                <AccordionTrigger>Open Source Philosophy</AccordionTrigger>
                <AccordionContent>
                  <div className="space-y-4 pt-2">
                    <p>Teach Niche is proudly open source, which means the codebase is publicly accessible for anyone to view, contribute to, or adapt.</p>
                    <ul className="list-disc pl-5 space-y-2">
                      <li><span className="font-semibold">Transparency:</span> Users can see exactly how the platform works, fostering trust and accountability.</li>
                      <li><span className="font-semibold">Collaboration:</span> Contributions from developers and enthusiasts who want to help improve Teach Niche are welcome.</li>
                      <li><span className="font-semibold">Innovation:</span> Open sourcing encourages creative solutions and rapid enhancements, benefiting the entire community.</li>
                    </ul>
                    <p>You can check out the repository on GitHub and take a look under the hood!</p>
                  </div>
                </AccordionContent>
              </AccordionItem>

              <AccordionItem value="growth">
                <AccordionTrigger>Built to Grow with the Community</AccordionTrigger>
                <AccordionContent>
                  <div className="space-y-4 pt-2">
                    <p>The best way to serve the kendama community is by listening and adapting to its needs.</p>
                    <ul className="list-disc pl-5 space-y-2">
                      <li><span className="font-semibold">Community Feedback:</span> Teach Niche actively seeks input from users to guide platform enhancements. User suggestions shape the future of Teach Niche.</li>
                      <li><span className="font-semibold">Feature Requests:</span> Ideas for new features or improvements are welcome. Teach Niche is eager to implement changes that benefit everyone.</li>
                      <li><span className="font-semibold">Continuous Improvement:</span> The development roadmap is flexible, allowing prioritization of updates that matter most to the community.</li>
                    </ul>
                    <p>By keeping the platform intentionally adaptable, Teach Niche ensures that it evolves in step with the community it serves.</p>
                  </div>
                </AccordionContent>
              </AccordionItem>
            </Accordion>
          </section>

          <section className="text-center bg-gradient-to-r from-orange-500/10 to-muted/50 rounded-lg p-8">
            <h2 className="text-2xl font-semibold mb-4 text-orange-500">Join Our Community</h2>
            <p className="text-lg max-w-2xl mx-auto">
              Whether you&rsquo;re here to teach or learn, Teach Niche provides the tools and support
              you need to succeed. Join our growing community of educators and learners today.
            </p>
          </section>
        </div>
      </div>
    </div>
    </div>
  );
}

================
File: app/api/lessons/route.ts
================
import { NextResponse } from 'next/server';
import { supabase } from '@/lib/supabase';
import { getAssetStatus } from '@/lib/mux';

export async function POST(request: Request) {
  try {
    // Get auth token from request header
    const authHeader = request.headers.get('authorization');
    if (!authHeader?.startsWith('Bearer ')) {
      return NextResponse.json(
        { error: 'Missing or invalid authorization header' },
        { status: 401 }
      );
    }

    const token = authHeader.split(' ')[1];
    const { data: { user }, error: authError } = await supabase.auth.getUser(token);

    if (authError || !user) {
      return NextResponse.json(
        { error: 'Invalid authentication token' },
        { status: 401 }
      );
    }

    const data = await request.json();
    const { 
      title, 
      description, 
      price, 
      muxAssetId,
      muxPlaybackId,
      content = '',
      status = 'draft'
    } = data;

    // Validate required fields
    if (!title || !description || !muxAssetId || !muxPlaybackId) {
      return NextResponse.json(
        { error: 'Missing required fields' },
        { status: 400 }
      );
    }

    // Create lesson in Supabase with the upload ID for now
    // Generate a UUID for the new lesson
    const lessonData = {
      id: crypto.randomUUID(),
      title,
      description,
      price: price || 0,
      content,
      status,
      creator_id: user.id,
      mux_asset_id: muxAssetId,
      mux_playback_id: muxPlaybackId,
      version: 1
    };

    console.log('Creating lesson with data:', lessonData);

    const { data: lesson, error } = await supabase
      .from('lessons')
      .insert(lessonData)
      .select('id, title, description, price, creator_id, content, status, mux_asset_id, version')
      .single();

    if (error) {
      console.error('Lesson creation error:', error);
      return NextResponse.json(
        { 
          error: 'Failed to create lesson',
          details: error.message,
          code: error.code
        },
        { status: 500 }
      );
    }

    return NextResponse.json(lesson);
  } catch (error) {
    console.error('Lesson creation error:', error);
    return NextResponse.json(
      { 
        error: 'Failed to create lesson',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}

================
File: app/api/mux/playback-id/route.ts
================
import { NextResponse } from 'next/server';
import { Video } from '@/lib/mux';

export async function GET(request: Request) {
  const { searchParams } = new URL(request.url);
  const assetId = searchParams.get('assetId');

  if (!assetId) {
    return NextResponse.json({ error: 'Asset ID is required' }, { status: 400 });
  }

  try {
    try {
      console.log('Creating playback ID for asset:', assetId);
      // First check if the asset exists and is ready
      const asset = await Video.Assets.get(assetId);
      console.log('Asset status:', asset.status);
      
      if (asset.status !== 'ready') {
        return NextResponse.json(
          { error: 'Asset not ready', details: `Current status: ${asset.status}` },
          { status: 400 }
        );
      }

      // Create a new playback ID
      const playbackId = await Video.Assets.createPlaybackId(assetId, { 
        policy: 'public' 
      });
      
      console.log('Created playback ID:', JSON.stringify({
        assetId: assetId,
        playbackId: playbackId
      }, null, 2));

      if (!playbackId || !playbackId.id) {
        throw new Error('Failed to create playback ID');
      }

      return NextResponse.json({ playbackId: playbackId.id });
    } catch (muxError: any) {
      console.error('Mux API error:', {
        error: muxError,
        message: muxError.message,
        type: muxError.type,
        details: muxError.details
      });
      throw muxError;
    }
  } catch (error: any) {
    console.error('Error fetching Mux asset:', {
      message: error.message,
      stack: error.stack,
      code: error.code,
      type: error.type,
      details: error.details || error
    });

    // Check if it's a Mux API error
    if (error.type && error.type.startsWith('mux')) {
      return NextResponse.json(
        { error: `Mux API error: ${error.type}`, details: error.message },
        { status: error.status || 500 }
      );
    }
    return NextResponse.json(
      { error: 'Failed to fetch playback ID', details: error.message },
      { status: 500 }
    );
  }
}

================
File: app/api/video/upload/route.ts
================
import { NextResponse } from 'next/server';
import Mux from "@mux/mux-node";

// Initialize Mux client with environment variables
const muxClient = new Mux({
  tokenId: process.env.MUX_TOKEN_ID!,
  tokenSecret: process.env.MUX_TOKEN_SECRET!
});
const { video } = muxClient;

async function createUpload() {
  return await video.uploads.create({
    new_asset_settings: {
      playback_policy: ["public"],
      encoding_tier: "baseline",
    },
    cors_origin: "*",
  });
}
import { headers } from 'next/headers';

// Helper function to handle POST request (upload initialization)
async function handlePostRequest() {
  const headersList = await headers();
  const origin = headersList.get('origin') || '*';

  try {
    console.log('Starting upload request initialization');
    const upload = await createUpload();

    console.log('Successfully created upload URL:', {
      id: upload.id,
      hasUrl: !!upload.url,
      headers: {
        origin,
        allowMethods: 'POST, PUT, OPTIONS, HEAD',
        allowHeaders: 'Content-Type, Content-Length, Content-Range'
      }
    });

    return NextResponse.json(
      {
        url: upload.url,
        assetId: upload.id
      },
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': origin,
          'Access-Control-Allow-Methods': 'POST, PUT, OPTIONS, HEAD',
          'Access-Control-Allow-Headers': 'Content-Type, Content-Length, Content-Range, Authorization'
        }
      }
    );
  } catch (error) {
    console.error('Video upload initialization error:', {
      message: error instanceof Error ? error.message : 'Unknown error',
      stack: error instanceof Error ? error.stack : undefined,
      error
    });
    
    return NextResponse.json(
      { 
        error: 'Failed to initialize video upload. Please try again.',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      {
        status: 500,
        headers: {
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': origin,
          'Access-Control-Allow-Methods': 'POST, PUT, OPTIONS, HEAD',
          'Access-Control-Allow-Headers': 'Content-Type, Content-Length, Content-Range'
        }
      }
    );
  }
}

export async function POST() {
  return handlePostRequest();
}

export async function PUT(request: Request) {
  if (!request?.body) {
    return NextResponse.json(
      { error: 'No request body' },
      { status: 400 }
    );
  }

  const headersList = await headers();
  const origin = headersList.get('origin') || '*';
  
  // Get the upload URL from the query parameters
  const requestUrl = new URL(request.url);
  const uploadUrl = requestUrl.searchParams.get('url');
  
  const contentType = headersList.get('content-type');
  const contentLength = headersList.get('content-length');
  const contentRange = headersList.get('content-range');

  console.log('Debug PUT request:', {
    uploadUrl,
    requestUrl: request.url,
    headers: Object.fromEntries(headersList.entries()),
    contentType,
    contentLength,
    contentRange
  });

  if (!uploadUrl) {
    console.error('Missing upload URL in headers and query params');
    return NextResponse.json(
      { 
        error: 'Missing upload URL',
        headers: Object.fromEntries(headersList.entries()),
        url: request.url
      },
      {
        status: 400,
        headers: {
          'Access-Control-Allow-Origin': origin,
          'Access-Control-Allow-Methods': 'POST, PUT, OPTIONS',
          'Access-Control-Allow-Headers': 'Content-Type, Content-Length, Content-Range, Authorization, X-Mux-Upload-Url'
        }
      }
    );
  }

  if (!uploadUrl.startsWith('https://')) {
    return NextResponse.json(
      { error: 'Missing upload URL' },
      {
        status: 400,
        headers: {
          'Access-Control-Allow-Origin': origin,
          'Access-Control-Allow-Methods': 'POST, PUT, OPTIONS',
          'Access-Control-Allow-Headers': 'Content-Type, Content-Length, Content-Range, Authorization, X-Mux-Upload-Url'
        }
      }
    );
  }

  try {
    const response = await fetch(uploadUrl, {
      method: 'PUT',
      body: request.body,
      headers: {
        'Content-Type': contentType || 'video/mp4',
        'Content-Length': contentLength || '',
        'Content-Range': contentRange || ''
      }
    });

    if (!response.ok) {
      throw new Error(`Mux upload failed: ${response.status} ${response.statusText}`);
    }

    const headers = {
      'Access-Control-Allow-Origin': origin,
      'Access-Control-Allow-Methods': 'POST, PUT, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type, Content-Length, Content-Range, Authorization, X-Mux-Upload-Url'
    };

    return NextResponse.json(
      response.status === 308 
        ? { status: 'processing' }
        : { status: 'complete' },
      {
        status: response.status,
        headers
      }
    );
  } catch (error) {
    console.error('Video upload error:', error);
    return NextResponse.json(
      { 
        error: 'Upload failed',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      {
        status: 500,
        headers: {
          'Access-Control-Allow-Origin': origin,
          'Access-Control-Allow-Methods': 'POST, PUT, OPTIONS',
          'Access-Control-Allow-Headers': 'Content-Type, Content-Length, Content-Range, Authorization, X-Mux-Upload-Url'
        }
      }
    );
  }
}

export async function OPTIONS() {
  const headersList = await headers();
  const origin = headersList.get('origin') || '*';

  return NextResponse.json(null, {
    status: 204,
    headers: {
      'Access-Control-Allow-Origin': origin,
      'Access-Control-Allow-Methods': 'POST, PUT, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type, Content-Length, Content-Range, Authorization, X-Mux-Upload-Url'
    }
  });
}

================
File: app/components/ui/lesson-form.tsx
================
import { useState } from 'react';
import { Loader2 } from 'lucide-react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { Button } from './button';
import { Input } from './input';
import { Textarea } from './textarea';
import { VideoUploader } from './video-uploader';
import { useToast } from './use-toast';
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from './form';

const lessonFormSchema = z.object({
  title: z.string().min(1, 'Title is required'),
  description: z.string().min(1, 'Description is required'),
  price: z.number().min(0, 'Price must be 0 or greater'),
  content: z.string().optional(),
  muxAssetId: z.string().min(1, 'Video is required'),
  muxPlaybackId: z.string().optional(),
});

type LessonFormData = z.infer<typeof lessonFormSchema>;

interface LessonFormProps {
  initialData?: Partial<LessonFormData>;
  onSubmit: (data: LessonFormData) => Promise<void>;
  isSubmitting?: boolean;
  className?: string;
}

export function LessonForm({ 
  initialData, 
  onSubmit, 
  isSubmitting = false,
  className 
}: LessonFormProps) {
  const { toast } = useToast();
  const [isUploading, setIsUploading] = useState(false);

  const form = useForm<LessonFormData>({
    resolver: zodResolver(lessonFormSchema),
    defaultValues: {
      title: initialData?.title || '',
      description: initialData?.description || '',
      price: initialData?.price || 0,
      content: initialData?.content || '',
      muxAssetId: initialData?.muxAssetId || '',
    }
  });

  const handleSubmit = async (data: any) => {
    if (isUploading) {
      toast({
        title: "Please wait",
        description: "Please wait for the video to finish uploading",
        variant: "destructive",
      });
      return;
    }

    try {
      // Manual validation
      if (!data.title) {
        throw new Error('Title is required');
      }
      if (!data.description) {
        throw new Error('Description is required');
      }
      if (data.price < 0) {
        throw new Error('Price must be 0 or greater');
      }
      if (!data.muxAssetId) {
        throw new Error('Video is required');
      }

      await onSubmit(data);
    } catch (error) {
      toast({
        title: 'Error',
        description: error instanceof Error ? error.message : 'Failed to save lesson',
        variant: 'destructive',
      });
    }
  };

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(handleSubmit)} className={className}>
        <div className="space-y-6">
          <FormField
            control={form.control}
            name="title"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Title</FormLabel>
                <FormControl>
                  <Input {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />

          <FormField
            control={form.control}
            name="description"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Description</FormLabel>
                <FormControl>
                  <Textarea {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />

          <FormField
            control={form.control}
            name="price"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Price</FormLabel>
                <FormControl>
                  <Input 
                    type="number" 
                    min="0" 
                    step="0.01"
                    {...field}
                    onChange={e => {
                      const value = e.target.value === '' ? 0 : parseFloat(e.target.value);
                      field.onChange(value);
                    }}
                  />
                </FormControl>
                <FormDescription>
                  Set to 0 for free lessons
                </FormDescription>
                <FormMessage />
              </FormItem>
            )}
          />

          <FormField
            control={form.control}
            name="content"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Content</FormLabel>
                <FormControl>
                  <Textarea {...field} />
                </FormControl>
                <FormDescription>
                  Additional content or notes for the lesson
                </FormDescription>
                <FormMessage />
              </FormItem>
            )}
          />

          <FormField
            control={form.control}
            name="muxAssetId"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Video</FormLabel>
                <FormControl>
                  <div>
                    <VideoUploader
                      endpoint="/api/video/upload"
                      onUploadStart={() => setIsUploading(true)}
                      onUploadComplete={(uploadId) => {
                        // Store the upload ID for now, asset ID will be retrieved later
                        setIsUploading(false);
                        field.onChange(uploadId);
                        console.log("Upload completed with ID:", uploadId);
                        toast({
                          title: "Video uploaded",
                          description: "Your video has been uploaded successfully.",
                        });
                      }}
                      onError={(error) => {
                        setIsUploading(false);
                        toast({
                          title: "Upload failed",
                          description: error.message,
                          variant: "destructive",
                        });
                      }}
                    />
                    <div className="text-sm text-muted-foreground mt-2">
                      Upload state: {isUploading ? 'Uploading...' : field.value ? 'Uploaded' : 'Not uploaded'}
                      {field.value && <span className="ml-2">(Asset ID: {field.value})</span>}
                    </div>
                  </div>
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />

          <div className="flex justify-end">
            <Button 
              type="submit" 
              size="lg"
              disabled={isSubmitting || !form.getValues().muxAssetId}
            >
              {isSubmitting && (
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              )}
              {isSubmitting ? "Creating Lesson..." : "Create Lesson"}
            </Button>
            <div className="text-sm text-muted-foreground mt-2">
              {Object.keys(form.formState.errors).length > 0 && (
                <p className="text-destructive">Please fix the following errors:</p>
              )}
              {Object.entries(form.formState.errors).map(([field, error]) => (
                <p key={field} className="text-destructive">
                  {error?.message}
                </p>
              ))}
            </div>
            {/* Debug info */}
            <pre className="text-xs text-muted-foreground mt-4">
              Form State: {JSON.stringify({
                isValid: form.formState.isValid,
                isDirty: form.formState.isDirty,
                errors: form.formState.errors,
                isUploading,
                isSubmitting,
                values: form.getValues()
              }, null, 2)}
            </pre>
          </div>
        </div>
      </form>
    </Form>
  );
}

================
File: app/legal/page.tsx
================
export default function LegalPage() {
  return (
    <div className="container mx-auto px-4 py-8 mt-16">
      <h1 className="text-3xl font-bold mb-6">Teach Niche Legal Information</h1>
      
      <section id="terms" className="mb-12">
        <h2 className="text-2xl font-semibold mb-4">Terms of Service</h2>
        <div className="prose max-w-none">
          <h3 className="text-xl font-semibold mt-6 mb-3">1. Acceptance of Terms</h3>
          <p>By accessing or using the Teach Niche website (the &ldquo;Service&rdquo;), you acknowledge that you have read, understood, and agree to be bound by these Terms of Use, the Privacy Policy, and the Cookie Policy (collectively, the &ldquo;Terms&rdquo;). If you do not agree to these Terms, please do not use the Service.</p>

          <h3 className="text-xl font-semibold mt-6 mb-3">2. Amendments to the Terms</h3>
          <p>Teach Niche reserves the right to modify or update these Terms at any time without prior notice. Your continued use of the Service following any changes constitutes acceptance of the revised Terms. We recommend that you review these Terms periodically.</p>

          <h3 className="text-xl font-semibold mt-6 mb-3">3. Platform Purpose and User Representations</h3>
          <p>Teach Niche is an online marketplace where users can buy and sell video tutorials. You agree that you are solely responsible for verifying the quality, accuracy, and legality of the video tutorials offered on the platform. Neither Teach Niche nor any third party guarantees the suitability or reliability of any content provided by users.</p>

          <h3 className="text-xl font-semibold mt-6 mb-3">4. User Categories and Responsibilities</h3>
          <h4 className="text-lg font-medium mt-4 mb-2">4.1 Sellers</h4>
          <ul className="list-disc pl-6 mb-4">
            <li>Representations and Warranties: As a seller, you warrant that you own or have all necessary rights, licenses, and permissions to sell the video tutorials and any associated materials.</li>
            <li>Content Standards: Sellers are responsible for ensuring that all submitted content complies with applicable laws and these Terms.</li>
            <li>Fees and Transactions: All sales transactions are subject to Teach Niche&rsquo;s fee schedule and payment processing terms.</li>
          </ul>

          <h4 className="text-lg font-medium mt-4 mb-2">4.2 Buyers</h4>
          <ul className="list-disc pl-6 mb-4">
            <li>Risk Acknowledgment: Buyers acknowledge that transactions are conducted at their own risk.</li>
            <li>Refunds and Dispute Resolution: All sales are subject to Teach Niche&rsquo;s Refund and Dispute Resolution Policy.</li>
          </ul>

          <h3 className="text-xl font-semibold mt-6 mb-3">5. Intellectual Property Rights</h3>
          <p>All content on this website is either owned by or licensed to Teach Niche. By uploading content, you grant Teach Niche a non-exclusive, worldwide, royalty-free license to use, reproduce, display, and distribute such content.</p>

          <h3 className="text-xl font-semibold mt-6 mb-3">6. Disclaimer of Warranties</h3>
          <p>The Service and all content are provided on an &ldquo;as is&rdquo; and &ldquo;as available&rdquo; basis without any warranties of any kind, either express or implied.</p>

          <h3 className="text-xl font-semibold mt-6 mb-3">7. Payment Processing</h3>
          <p>All financial transactions are processed by third-party payment service providers. Your use of the Service is subject to their terms and conditions.</p>
        </div>
      </section>

      <section id="privacy" className="mb-12">
        <h2 className="text-2xl font-semibold mb-4">Privacy Policy</h2>
        <div className="prose max-w-none">
          <h3 className="text-xl font-semibold mt-6 mb-3">8. Data Privacy and Security</h3>
          <h4 className="text-lg font-medium mt-4 mb-2">8.1 Privacy Policy</h4>
          <p>We are committed to protecting your privacy. Our Privacy Policy explains how we collect, use, disclose, and safeguard your information.</p>
          <ul className="list-disc pl-6 mb-4">
            <li>Information Collection: We collect personal data provided by you, such as name, email, password, and content.</li>
            <li>Data Use: Your information is used to operate and improve the Service and provide support.</li>
            <li>Sharing and Disclosure: We do not sell your personal information but may share it with service providers.</li>
          </ul>

          <h4 className="text-lg font-medium mt-4 mb-2">8.2 Security Measures</h4>
          <p>We implement reasonable security measures to protect your data, though no online method is completely secure.</p>

          <h3 className="text-xl font-semibold mt-6 mb-3">9. Cookie Policy</h3>
          <p>Teach Niche uses cookies to enhance your experience. By using our Service, you consent to our use of cookies as detailed in our Cookies Policy.</p>
        </div>
      </section>

      <section id="legal" className="mb-12">
        <h2 className="text-2xl font-semibold mb-4">Additional Legal Information</h2>
        <div className="prose max-w-none">
          <h3 className="text-xl font-semibold mt-6 mb-3">10. Governing Law and Dispute Resolution</h3>
          <p>These Terms are governed by the laws of the jurisdiction in which Teach Niche is headquartered. Disputes shall be resolved through binding arbitration.</p>

          <h3 className="text-xl font-semibold mt-6 mb-3">11. Indemnification</h3>
          <p>You agree to indemnify and hold harmless Teach Niche from claims arising from your use of the Service or violation of these Terms.</p>

          <h3 className="text-xl font-semibold mt-6 mb-3">12. Termination</h3>
          <p>Teach Niche reserves the right to suspend or terminate your access to the Service for violations of these Terms.</p>

          <h3 className="text-xl font-semibold mt-6 mb-3">13. Severability</h3>
          <p>If any provision of these Terms is invalid, the remaining provisions shall remain in effect.</p>

          <h3 className="text-xl font-semibold mt-6 mb-3">14. Contact Information</h3>
          <p>For questions about these Terms, contact us at: <a href="mailto:info@teach-niche.com" className="text-primary hover:underline">info@teach-niche.com</a></p>
        </div>
      </section>
    </div>
  );
}

================
File: app/lessons/[id]/lesson-detail.tsx
================
"use client";

import { useEffect, useState } from "react";
import { VideoPlayer } from "@/components/ui/video-player";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Loader2, ArrowLeft } from "lucide-react";
import Link from "next/link";
import { supabase } from "@/lib/supabase";
import { toast } from "@/components/ui/use-toast";
import { Toaster } from "@/components/ui/toaster";
import { useRouter } from "next/navigation";
import mux from 'mux-embed';
import Mux from '@mux/mux-node';

interface Lesson {
  id: string;
  title: string;
  description: string;
  price: number;
  content?: string;
  status: string;
  mux_asset_id?: string;
  mux_playback_id?: string;
  created_at: string;
  creator_id: string;
  version: number;
}

interface LessonDetailProps {
  id: string;
}

export default function LessonDetail({ id }: LessonDetailProps) {
  const [lesson, setLesson] = useState<Lesson | null>(null);
  const [loading, setLoading] = useState(true);
  const router = useRouter();

  useEffect(() => {
    if (lesson?.mux_playback_id) {
      const playerInitTime = mux.utils.now();
      
      mux.monitor('#lesson-video', {
        debug: false,
        data: {
          env_key: process.env.NEXT_PUBLIC_MUX_ENV_KEY!, 
          player_name: 'Lesson Player',
          player_init_time: playerInitTime,
          video_id: lesson.id,
          video_title: lesson.title,
          video_stream_type: 'on-demand',
        }
      });
    }

    return () => {
      const player = document.querySelector('#lesson-video');
      if (player && (player as any).mux) {
        (player as any).mux.destroy();
      }
    };
  }, [lesson?.id, lesson?.title, lesson?.mux_playback_id]);

  useEffect(() => {
    async function fetchLesson() {
      try {
        const { data, error } = await supabase
          .from('lessons')
          .select('*')
          .eq('id', id)
          .single();

        if (error) throw error;
        if (!data) throw new Error('Lesson not found');

        // If we have an asset ID but no playback ID, get it from Mux
        if (data.mux_asset_id && !data.mux_playback_id) {
          const response = await fetch(`/api/mux/playback-id?assetId=${data.mux_asset_id}`);
          const result = await response.json();
          
          if (!response.ok) {
            console.error('Error fetching playback ID:', result);
            throw new Error(result.error || 'Failed to fetch playback ID');
          }
          
          if (result.playbackId) {
            data.mux_playback_id = result.playbackId;
            // Update the database with the playback ID
            await supabase
              .from('lessons')
              .update({ mux_playback_id: result.playbackId })
              .eq('id', data.id);
          }
        }
        
        setLesson(data);
      } catch (error) {
        console.error('Error fetching lesson:', {
          message: error instanceof Error ? error.message : 'Unknown error',
          stack: error instanceof Error ? error.stack : undefined,
          error: JSON.stringify(error, Object.getOwnPropertyNames(error))
        });
        toast({
          title: "Error",
          description: error instanceof Error ? error.message : "Failed to load lesson. Please try again.",
          variant: "destructive",
        });
        router.push('/lessons');
      } finally {
        setLoading(false);
      }
    }

    fetchLesson();
  }, [id, router]);

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-b from-background to-muted/20 pt-16">
        <div className="container max-w-4xl px-4 py-10 sm:px-6 lg:px-8 mx-auto">
          <div className="flex justify-center items-center min-h-[400px]">
            <Loader2 className="h-8 w-8 animate-spin" />
          </div>
        </div>
      </div>
    );
  }

  if (!lesson) return null;

  return (
    <div className="min-h-screen bg-gradient-to-b from-background to-muted/20 pt-16">
      <div className="container max-w-4xl px-4 py-10 sm:px-6 lg:px-8 mx-auto">
        <div className="mb-6">
          <Link href="/lessons">
            <Button variant="ghost" className="mb-4">
              <ArrowLeft className="mr-2 h-4 w-4" />
              Back to Lessons
            </Button>
          </Link>
          <h1 className="text-3xl font-bold tracking-tight sm:text-4xl mb-4">
            {lesson.title}
          </h1>
          {lesson.mux_playback_id && (
            <div className="mb-6">
              <VideoPlayer
                id="lesson-video"
                playbackId={lesson.mux_playback_id}
                title={lesson.title}
                className="w-full aspect-video rounded-lg overflow-hidden"
              />
            </div>
          )}
          <Card className="p-6">
            <div className="space-y-4">
              <div>
                <h2 className="text-xl font-semibold mb-2">Description</h2>
                <p className="text-muted-foreground">{lesson.description}</p>
              </div>
              {lesson.content && (
                <div>
                  <h2 className="text-xl font-semibold mb-2">Content</h2>
                  <div className="prose max-w-none dark:prose-invert">
                    {lesson.content}
                  </div>
                </div>
              )}
              <div className="flex items-center justify-between pt-4 border-t">
                <div className="text-sm text-muted-foreground">
                  Version {lesson.version}
                </div>
                <div className="font-medium">
                  {lesson.price === 0 ? (
                    <span className="text-green-600">Free</span>
                  ) : (
                    <span>${lesson.price.toFixed(2)}</span>
                  )}
                </div>
              </div>
            </div>
          </Card>
        </div>
      </div>
      <Toaster />
    </div>
  );
}

================
File: app/lessons/[id]/page.tsx
================
import { Suspense } from "react";
import LessonDetail from "./lesson-detail";
import { Loader2 } from "lucide-react";

export default async function LessonPage({ params }: { params: { id: string } }) {
  const { id } = await params;
  return (
    <Suspense
      fallback={
        <div className="min-h-screen bg-gradient-to-b from-background to-muted/20 pt-16">
          <div className="container max-w-4xl px-4 py-10 sm:px-6 lg:px-8 mx-auto">
            <div className="flex justify-center items-center min-h-[400px]">
              <Loader2 className="h-8 w-8 animate-spin" />
            </div>
          </div>
        </div>
      }
    >
      <LessonDetail id={id} />
    </Suspense>
  );
}

================
File: app/lessons/new/page.tsx
================
"use client";

import { LessonForm } from "@/components/ui/lesson-form";
import { toast } from "@/components/ui/use-toast";
import { Toaster } from "@/components/ui/toaster";
import { useRouter } from "next/navigation";
import { useState } from "react";
import { supabase } from "@/lib/supabase";

export default function NewLessonPage() {
  const router = useRouter();
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleSubmit = async (data: {
    title: string;
    description: string;
    muxAssetId?: string;
    muxPlaybackId?: string;
    price?: number;
  }) => {
    setIsSubmitting(true);
    try {
      console.log("Form submission data:", data); // Debug submission data

      // Check if muxAssetId exists and is not empty
      if (!data.muxAssetId || data.muxAssetId.trim() === "") {
        toast({
          title: "Video Required",
          description: "Please upload a video before creating the lesson",
          variant: "destructive",
        });
        setIsSubmitting(false);
        return;
      }

      const session = await supabase.auth.getSession();
      if (!session.data.session) {
        toast({
          title: "Authentication Required",
          description: "Please sign in to create a lesson",
          variant: "destructive",
        });
        setIsSubmitting(false);
        return;
      }

      // Create playback ID for the asset
      console.log('Creating playback ID for asset:', data.muxAssetId);
      
      // Add longer delay to allow Mux to process the asset
      await new Promise(resolve => setTimeout(resolve, 10000));
      
      const playbackResponse = await fetch(`/api/mux/playback-id?assetId=${data.muxAssetId}`, {
        headers: {
          "Authorization": `Bearer ${session.data.session.access_token}`
        }
      });
      
      const playbackData = await playbackResponse.json();
      console.log('Playback response:', playbackData);
      
      if (!playbackResponse.ok) {
        const errorMessage = playbackData.error 
          ? `${playbackData.error}${playbackData.details ? `: ${playbackData.details}` : ''}`
          : playbackResponse.statusText;
        console.error('Playback ID error:', {
          status: playbackResponse.status,
          statusText: playbackResponse.statusText,
          data: playbackData
        });
        throw new Error(`Failed to get playback ID: ${errorMessage}`);
      }

      if (!playbackData.playbackId) {
        throw new Error('No playback ID returned from server');
      }

      console.log('Received playback ID:', playbackData.playbackId);
      const { playbackId } = playbackData;
      data.muxPlaybackId = playbackId;

      if (!session.data.session) {
        toast({
          title: "Authentication Required",
          description: "Please sign in to create a lesson",
          variant: "destructive",
        });
        setIsSubmitting(false);
        return;
      }

      const response = await fetch("/api/lessons", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer ${session.data.session.access_token}`
        },
        body: JSON.stringify(data),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        console.error('API Error Response:', errorData);
        throw new Error(
          errorData.details || 
          errorData.message || 
          `Failed to create lesson: ${response.statusText}`
        );
      }

      const lesson = await response.json();
      
      toast({
        title: "Lesson Created!",
        description: "Your new lesson has been created successfully.",
      });

      router.push(`/lessons/${lesson.id}`);
    } catch (error) {
      console.error('Lesson creation error:', error);
      toast({
        title: "Creation Failed",
        description: error instanceof Error ? error.message : "There was an error creating your lesson. Please try again.",
        variant: "destructive",
      });
      setIsSubmitting(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-background to-muted/20 pt-16">
      <div className="container max-w-4xl px-4 py-10 sm:px-6 lg:px-8 mx-auto">
        <div className="space-y-6">
          <div className="space-y-2 text-center">
            <h1 className="text-3xl font-bold tracking-tight sm:text-4xl md:text-5xl">
              Create New Lesson
            </h1>
            <p className="text-muted-foreground max-w-2xl mx-auto">
              Share your knowledge with the world. Fill out the form below to create your new lesson.
            </p>
          </div>
          <div className="bg-card rounded-lg border shadow-sm p-6 md:p-8">
            <LessonForm onSubmit={handleSubmit} isSubmitting={isSubmitting} />
          </div>
        </div>
      </div>
      <Toaster />
    </div>
  );
}

================
File: app/lessons/page.tsx
================
"use client";

import { useEffect, useState } from "react";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Loader2, Plus } from "lucide-react";
import Link from "next/link";
import { supabase } from "@/lib/supabase";
import { toast } from "@/components/ui/use-toast";
import { Toaster } from "@/components/ui/toaster";

interface Lesson {
  id: string;
  title: string;
  description: string;
  price: number;
  created_at: string;
  // Add other fields as needed once we see the API implementation
}

export default function LessonsPage() {
  const [lessons, setLessons] = useState<Lesson[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    async function fetchLessons() {
      try {
        const { data, error } = await supabase
          .from('lessons')
          .select('*')
          .order('created_at', { ascending: false });

        if (error) throw error;
        setLessons(data || []);
      } catch (error) {
        console.error('Error fetching lessons:', error);
        toast({
          title: "Error",
          description: "Failed to load lessons. Please try again.",
          variant: "destructive",
        });
      } finally {
        setLoading(false);
      }
    }

    fetchLessons();
  }, []);

  return (
    <div className="min-h-screen bg-gradient-to-b from-background to-muted/20 pt-16">
      <div className="container max-w-7xl px-4 py-10 sm:px-6 lg:px-8 mx-auto">
        <div className="flex justify-between items-center mb-8">
          <div>
            <h1 className="text-3xl font-bold tracking-tight sm:text-4xl">
              Lessons
            </h1>
            <p className="mt-2 text-muted-foreground">
              Browse and manage your lessons
            </p>
          </div>
          <Link href="/lessons/new">
            <Button>
              <Plus className="mr-2 h-4 w-4" />
              New Lesson
            </Button>
          </Link>
        </div>

        {loading ? (
          <div className="flex justify-center items-center min-h-[200px]">
            <Loader2 className="h-8 w-8 animate-spin" />
          </div>
        ) : lessons.length === 0 ? (
          <Card className="p-8 text-center">
            <h3 className="font-semibold mb-2">No lessons yet</h3>
            <p className="text-muted-foreground mb-4">
              Get started by creating your first lesson
            </p>
            <Link href="/lessons/new">
              <Button>
                <Plus className="mr-2 h-4 w-4" />
                Create Lesson
              </Button>
            </Link>
          </Card>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {lessons.map((lesson) => (
              <Link key={lesson.id} href={`/lessons/${lesson.id}`}>
                <Card className="h-full hover:shadow-md transition-shadow">
                  <div className="p-6">
                    <h3 className="font-semibold mb-2 line-clamp-2">
                      {lesson.title}
                    </h3>
                    <p className="text-sm text-muted-foreground mb-4 line-clamp-3">
                      {lesson.description}
                    </p>
                    <div className="text-sm font-medium">
                      {lesson.price === 0 ? (
                        <span className="text-green-600">Free</span>
                      ) : (
                        <span>${lesson.price.toFixed(2)}</span>
                      )}
                    </div>
                  </div>
                </Card>
              </Link>
            ))}
          </div>
        )}
      </div>
      <Toaster />
    </div>
  );
}

================
File: app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: Arial, Helvetica, sans-serif;
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 20 14.3% 4.1%;
    --card: 0 0% 100%;
    --card-foreground: 20 14.3% 4.1%;
    --popover: 0 0% 100%;
    --popover-foreground: 20 14.3% 4.1%;
    --primary: 24.6 95% 53.1%;
    --primary-foreground: 60 9.1% 97.8%;
    --secondary: 60 4.8% 95.9%;
    --secondary-foreground: 24 9.8% 10%;
    --muted: 60 4.8% 95.9%;
    --muted-foreground: 25 5.3% 44.7%;
    --accent: 60 4.8% 95.9%;
    --accent-foreground: 24 9.8% 10%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 60 9.1% 97.8%;
    --border: 20 5.9% 90%;
    --input: 20 5.9% 90%;
    --ring: 24.6 95% 53.1%;
    --radius: 0.5rem;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
  }

  .dark {
    --background: 20 14.3% 4.1%;
    --foreground: 60 9.1% 97.8%;
    --card: 20 14.3% 4.1%;
    --card-foreground: 60 9.1% 97.8%;
    --popover: 20 14.3% 4.1%;
    --popover-foreground: 60 9.1% 97.8%;
    --primary: 20.5 90.2% 48.2%;
    --primary-foreground: 60 9.1% 97.8%;
    --secondary: 12 6.5% 15.1%;
    --secondary-foreground: 60 9.1% 97.8%;
    --muted: 12 6.5% 15.1%;
    --muted-foreground: 24 5.4% 63.9%;
    --accent: 12 6.5% 15.1%;
    --accent-foreground: 60 9.1% 97.8%;
    --destructive: 0 72.2% 50.6%;
    --destructive-foreground: 60 9.1% 97.8%;
    --border: 12 6.5% 15.1%;
    --input: 12 6.5% 15.1%;
    --ring: 20.5 90.2% 48.2%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

================
File: app/layout.tsx
================
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import Image from "next/image";
import { Footer } from "@/components/ui/footer";
import { Header } from "@/components/ui/header";
import { Providers } from "@/components/providers";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Teach Niche",
  description: "A platform for niche educational content",
  icons: {
    icon: '/favicon.png',
  },
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased min-h-screen flex flex-col`}
      >
        <Providers
          attribute="class"
          defaultTheme="dark"
          enableSystem
          disableTransitionOnChange
        >
          <Header />
          <main className="flex-1">
            {children}
          </main>
          <Footer 
            logo={<Image src="/favicon.png" alt="Teach Niche Logo" width={24} height={24} />}
            brandName="Teach Niche"
            socialLinks={[]}
            mainLinks={[
              {
                href: "/docs",
                label: "Documentation"
              },
              {
                href: "/learn",
                label: "Learn"
              },
              {
                href: "/templates",
                label: "Templates"
              }
            ]}
            legalLinks={[
              {
                href: "/legal#terms",
                label: "Terms of Service"
              },
              {
                href: "/legal#privacy",
                label: "Privacy Policy"
              },
              {
                href: "/legal#legal",
                label: "Legal Information"
              }
            ]}
            copyright={{
              text: "© 2025 Teach Niche, LLC. All rights reserved.",
              license: "Released under the MIT License"
            }}
          />
        </Providers>
      </body>
    </html>
  );
}

================
File: app/page.tsx
================
import { Hero } from "@/components/ui/animated-hero";
import { Features } from "@/components/ui/features";
import { EmailSignup } from "@/components/ui/email-signup";

export default function Home() {
  return (
    <div className="flex flex-col">
      <div className="flex flex-col items-center justify-center p-8">
        <Hero />
      </div>
      <Features />
      <div className="bg-gradient-to-r from-primary/10 via-primary/5 to-primary/10 py-16">
        <EmailSignup />
      </div>
      
    </div>
  );
}

================
File: auth/AuthContext.tsx
================
'use client'

import { createContext, useContext, useEffect, useState } from 'react'
import { User } from '@supabase/supabase-js'
import { supabase } from '@/lib/supabase'

interface AuthContextType {
  user: User | null
  loading: boolean
}

const AuthContext = createContext<AuthContextType>({
  user: null,
  loading: true,
})

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null)
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    // Check active sessions and sets the user
    const { data: { subscription } } = supabase.auth.onAuthStateChange((event, session) => {
      setUser(session?.user ?? null)
      setLoading(false)
    })

    return () => subscription.unsubscribe()
  }, [])

  return (
    <AuthContext.Provider value={{ user, loading }}>
      {children}
    </AuthContext.Provider>
  )
}

export function useAuth() {
  return useContext(AuthContext)
}

================
File: auth/supabaseAuth.ts
================
import { supabase } from '@/lib/supabase'

export const signInWithEmail = async (email: string, password: string) => {
  const { data, error } = await supabase.auth.signInWithPassword({
    email,
    password,
  })
  if (error) throw error
  return data
}

export const signOut = async () => {
  const { error } = await supabase.auth.signOut()
  if (error) throw error
}

export const getCurrentUser = async () => {
  const { data: { session }, error } = await supabase.auth.getSession()
  if (error) throw error
  return session?.user || null
}

export const signInWithGoogle = async () => {
  try {
    const { data, error } = await supabase.auth.signInWithOAuth({
      provider: 'google',
    })
    return { data, error }
  } catch (err) {
    return { data: null, error: err as Error }
  }
}


export const signUp = async (email: string, password: string) => {
  const { data, error } = await supabase.auth.signUp({
    email,
    password,
  })
  if (error) throw error
  return data
}

================
File: components/ui/accordion.tsx
================
"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = "AccordionTrigger"

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))
AccordionContent.displayName = "AccordionContent"

export {
  Accordion,
  AccordionItem,
  AccordionTrigger,
  AccordionContent,
}

================
File: components/ui/animated-hero.tsx
================
"use client";

import { useEffect, useMemo, useState } from "react";
import Image from "next/image";
import Link from "next/link";
import { motion } from "framer-motion";
import { MoveRight } from "lucide-react";
import { Button } from "@/components/ui/button";

function Hero() {
  const [titleNumber, setTitleNumber] = useState(0);
  const [timeLeft, setTimeLeft] = useState<{days: number, hours: number, minutes: number}>({ days: 0, hours: 0, minutes: 0 });

  useEffect(() => {
    const calculateTimeLeft = () => {
      const launchDate = new Date('2025-03-01T00:00:00');
      const now = new Date();
      const difference = launchDate.getTime() - now.getTime();
      
      const days = Math.floor(difference / (1000 * 60 * 60 * 24));
      const hours = Math.floor((difference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
      const minutes = Math.floor((difference % (1000 * 60 * 60)) / (1000 * 60));
      
      setTimeLeft({ days, hours, minutes });
    };

    calculateTimeLeft();
    const timer = setInterval(calculateTimeLeft, 60000); // Update every minute

    return () => clearInterval(timer);
  }, []);
  const titles = useMemo(
    () => ["community", "kendama", "players", "pros", "students"],
    []
  );

  useEffect(() => {
    const timeoutId = setTimeout(() => {
      if (titleNumber === titles.length - 1) {
        setTitleNumber(0);
      } else {
        setTitleNumber(titleNumber + 1);
      }
    }, 2000);
    return () => clearTimeout(timeoutId);
  }, [titleNumber, titles]);

  return (
    <div className="w-full relative h-[600px]">
      <div className="absolute inset-0 z-0 overflow-hidden">
        <Image
          src="/303_group.png"
          alt="303 Group"
          fill
          className="w-full h-full object-cover filter grayscale opacity-20"
        />
      </div>
      <div className="container mx-auto relative z-10 h-full">
        <div className="flex gap-8 py-20 lg:py-40 items-center justify-center flex-col">
          <div className="bg-orange-100 dark:bg-orange-950 text-orange-950 dark:text-orange-400 px-6 py-3 rounded-full font-medium text-sm shadow-lg flex items-center gap-2 border border-orange-200 dark:border-orange-900">
            <span className="text-orange-700 dark:text-orange-200">Launching in:</span>
            <span className="font-bold">{timeLeft.days}d</span>
            <span className="font-bold">{timeLeft.hours}h</span>
            <span className="font-bold">{timeLeft.minutes}m</span>
          </div>
          <div className="flex gap-4 flex-col">
            <h1 className="text-3xl sm:text-5xl md:text-7xl max-w-2xl tracking-tighter text-center font-regular px-4">
              <span className="text-spektr-cyan-50">Support</span>
              <span className="relative flex w-full justify-center overflow-hidden text-center md:pb-4 md:pt-1">
                &nbsp;
                {titles.map((title, index) => (
                  <motion.span
                    key={index}
                    className="absolute font-semibold"
                    initial={{ opacity: 0, y: "-100" }}
                    transition={{ type: "spring", stiffness: 50 }}
                    animate={
                      titleNumber === index
                        ? {
                            y: 0,
                            opacity: 1,
                          }
                        : {
                            y: titleNumber > index ? -150 : 150,
                            opacity: 0,
                          }
                    }
                  >
                    {title}
                  </motion.span>
                ))}
              </span>
            </h1>

            <p className="text-base sm:text-lg md:text-xl leading-relaxed tracking-tight text-muted-foreground max-w-2xl text-center px-4">
              A community-driven platform helping kendama players share knowledge and make a living from their passion. 
              Join our waitlist to be part of this growing movement.
            </p>
          </div>
          <div className="flex flex-col sm:flex-row gap-3 px-4 w-full max-w-xs sm:max-w-none justify-center">
            <Link href="/about" className="w-full sm:w-auto">
              <Button size="default" className="gap-2 w-full sm:w-auto" variant="outline">
                Learn More <MoveRight className="w-4 h-4" />
              </Button>
            </Link>
            <Button 
              size="default"
              className="gap-2 w-full sm:w-auto"
              onClick={() => {
                document.querySelector('#email-signup')?.scrollIntoView({ 
                  behavior: 'smooth'
                });
              }}
            >
              Join Teacher Waitlist <MoveRight className="w-4 h-4" />
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
}

export { Hero };

================
File: components/ui/button.tsx
================
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";
import * as React from "react";

import { cn } from "@/lib/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-lg text-sm font-medium transition-colors outline-offset-2 focus-visible:outline focus-visible:outline-2 focus-visible:outline-ring/70 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground shadow-sm shadow-black/5 hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm shadow-black/5 hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm shadow-black/5 hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm shadow-black/5 hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-lg px-3 text-xs",
        lg: "h-10 rounded-lg px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button";
    return (
      <Comp className={cn(buttonVariants({ variant, size, className }))} ref={ref} {...props} />
    );
  },
);
Button.displayName = "Button";

export { Button, buttonVariants };

================
File: components/ui/card.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className,
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className,
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: components/ui/checkbox.tsx
================
"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className,
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }

================
File: components/ui/dialog.tsx
================
"use client";

import * as DialogPrimitive from "@radix-ui/react-dialog";
import * as React from "react";

import { cn } from "@/lib/utils";
import { Cross2Icon } from "@radix-ui/react-icons";

const Dialog = DialogPrimitive.Root;

const DialogTrigger = DialogPrimitive.Trigger;

const DialogPortal = DialogPrimitive.Portal;

const DialogClose = DialogPrimitive.Close;

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-[101] bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className,
    )}
    {...props}
  />
));
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName;

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-1/2 top-1/2 z-[101] grid max-h-[calc(100%-4rem)] w-full -translate-x-1/2 -translate-y-1/2 gap-4 overflow-y-auto border bg-background p-6 shadow-lg shadow-black/5 duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:max-w-[400px] sm:rounded-xl",
        className,
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="group absolute right-3 top-3 flex size-7 items-center justify-center rounded-lg outline-offset-2 transition-colors focus-visible:outline focus-visible:outline-2 focus-visible:outline-ring/70 disabled:pointer-events-none">
        <Cross2Icon
          width={16}
          height={16}
          strokeWidth={2}
          className="opacity-60 transition-opacity group-hover:opacity-100"
        />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
));
DialogContent.displayName = DialogPrimitive.Content.displayName;

const DialogHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (
  <div className={cn("flex flex-col space-y-1.5 text-center sm:text-left", className)} {...props} />
);
DialogHeader.displayName = "DialogHeader";

const DialogFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("flex flex-col-reverse gap-2 sm:flex-row sm:justify-end sm:gap-3", className)}
    {...props}
  />
);
DialogFooter.displayName = "DialogFooter";

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold tracking-tight", className)}
    {...props}
  />
));
DialogTitle.displayName = DialogPrimitive.Title.displayName;

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
DialogDescription.displayName = DialogPrimitive.Description.displayName;

export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
};

================
File: components/ui/dropdown-menu.tsx
================
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md",
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:size-4 [&>svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}

================
File: components/ui/email-signup.tsx
================
"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { supabase } from "@/lib/supabase";
import { motion } from "framer-motion";

export function EmailSignup() {
  const [email, setEmail] = useState("");
  const [status, setStatus] = useState<"idle" | "loading" | "success" | "error">("idle");
  const [message, setMessage] = useState("");

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setStatus("loading");

    try {
      await supabase
        .from("waitlist")
        .insert([{ email, signed_up_at: new Date().toISOString() }])
        .throwOnError();

      setStatus("success");
      setMessage("Thanks for joining our waitlist! We'll keep you updated.");
      setEmail("");
    } catch {
      setStatus("error");
      setMessage("Something went wrong. Please try again.");
    }
  };

  return (
    <div id="email-signup" className="w-full max-w-2xl mx-auto py-8 sm:py-12 px-4">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="text-center mb-8"
      >
        <h2 className="text-2xl sm:text-3xl font-bold mb-3 px-2">Join Our Teacher Waitlist</h2>
        <p className="text-muted-foreground text-base sm:text-lg px-2">
          Be one of our first teachers and start sharing your kendama expertise:
        </p>
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 mt-6 text-left max-w-xl mx-auto px-4">
          {[
            "Keep 85% of your lesson revenue",
            "Flexible teaching schedule",
            "Get paid to share your passion",
            "Access to growing student base",
          ].map((benefit) => (
            <motion.div
              key={benefit}
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              className="flex items-center gap-2"
            >
              <svg
                className="w-5 h-5 text-primary"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M5 13l4 4L19 7"
                />
              </svg>
              <span>{benefit}</span>
            </motion.div>
          ))}
        </div>
      </motion.div>

      <motion.form
        onSubmit={handleSubmit}
        className="space-y-4 max-w-md mx-auto"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ delay: 0.2 }}
      >
        <div className="flex flex-col sm:flex-row gap-2 w-full max-w-xs sm:max-w-none mx-auto justify-center">
          <Input
            type="email"
            placeholder="Enter your email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
            className="w-full"
          />
          <Button 
            type="submit" 
            disabled={status === "loading"}
            className="w-full sm:w-auto"
            size="default"
          >
            {status === "loading" ? "Joining..." : "Join Teacher Waitlist"}
          </Button>
        </div>
        {message && (
          <motion.p
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            className={`text-sm text-center ${
              status === "error" ? "text-red-500" : "text-green-500"
            }`}
          >
            {message}
          </motion.p>
        )}
      </motion.form>
    </div>
  );
}

================
File: components/ui/features.tsx
================
import { BookOpen, DollarSign, Users, Shield, Leaf, GraduationCap } from "lucide-react";

const features = [
  {
    title: "Expert Tutorials",
    description: "Access comprehensive tutorials from top kendama players and learn at your own pace",
    icon: BookOpen,
  },
  {
    title: "Monetize Your Skills",
    description: "Create and sell your own kendama lessons while setting your own prices",
    icon: DollarSign,
  },
  {
    title: "Community Support",
    description: "Join a thriving community of kendama enthusiasts - collaborate and grow together",
    icon: Users,
  },
  {
    title: "Integrity and Fairness",
    description: "Community-first platform ensuring creators are rewarded fairly",
    icon: Shield,
  },
  {
    title: "Sustainable Growth",
    description: "Building a long-term ecosystem for kendama education and innovation",
    icon: Leaf,
  },
  {
    title: "Growth and Learning",
    description: "Resources for skill development and tools to support your favorite players",
    icon: GraduationCap,
  },
];

export function Features() {
  return (
    <div className="py-24 bg-muted/50">
      <div className="container mx-auto px-4">
        <h2 className="text-3xl font-bold text-center mb-12">Why Choose Teach Niche?</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {features.map((feature) => (
            <div key={feature.title} className="flex flex-col items-center text-center p-6">
              <feature.icon className="w-12 h-12 mb-4 text-primary" />
              <h3 className="text-xl font-semibold mb-2">{feature.title}</h3>
              <p className="text-muted-foreground">{feature.description}</p>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

================
File: components/ui/footer.tsx
================
import Link from "next/link"
import { Button } from "@/components/ui/button"

interface FooterProps {
  logo: React.ReactNode
  brandName: string
  socialLinks: Array<{
    icon: React.ReactNode
    href: string
    label: string
  }>
  mainLinks: Array<{
    href: string
    label: string
  }>
  legalLinks: Array<{
    href: string
    label: string
  }>
  copyright: {
    text: string
    license?: string
  }
}

export function Footer({
  logo,
  brandName,
  socialLinks,
  legalLinks = [
    { href: "/legal#terms", label: "Terms of Service" },
    { href: "/legal#privacy", label: "Privacy Policy" },
    { href: "/legal#legal", label: "Legal Information" }
  ],
  copyright,
}: FooterProps) {
  return (
    <footer className="pb-6 pt-16 lg:pb-8 lg:pt-24">
      <div className="px-4 lg:px-8">
        <div className="md:flex md:items-start md:justify-between">
          <Link
            href="/"
            className="flex items-center gap-x-2"
            aria-label={brandName}
          >
            {logo}
            <span className="font-bold text-xl">{brandName}</span>
          </Link>
          <ul className="flex list-none mt-6 md:mt-0 space-x-3">
            {socialLinks.map((link, i) => (
              <li key={i}>
                <Button
                  variant="secondary"
                  size="icon"
                  className="h-10 w-10 rounded-full"
                  asChild
                >
                  <a href={link.href} target="_blank" aria-label={link.label}>
                    {link.icon}
                  </a>
                </Button>
              </li>
            ))}
          </ul>
        </div>
        <div className="border-t mt-6 pt-6 md:mt-4 md:pt-8 lg:grid lg:grid-cols-10">
          <nav className="lg:mt-0 lg:col-[4/11]">
            <ul className="list-none flex flex-wrap -my-1 -mx-2 lg:justify-end">
              <li className="my-1 mx-2 shrink-0">
                <a
                  href="https://www.instagram.com/teachniche/?hl=en"
                  target="_blank"
                  rel="noopener noreferrer"
                  className="text-sm text-primary underline-offset-4 hover:underline"
                >
                  Instagram
                </a>
              </li>
              <li className="my-1 mx-2 shrink-0">
                <a
                  href="https://github.com/jayminwest/Teach-Niche"
                  target="_blank"
                  rel="noopener noreferrer"
                  className="text-sm text-primary underline-offset-4 hover:underline"
                >
                  Github
                </a>
              </li>
            </ul>
          </nav>
          <div className="mt-6 lg:mt-0 lg:col-[4/11]">
            <ul className="list-none flex flex-wrap -my-1 -mx-3 lg:justify-end">
              {legalLinks.map((link, i) => (
                <li key={i} className="my-1 mx-3 shrink-0">
                  <a
                    href={link.href}
                    className="text-sm text-muted-foreground underline-offset-4 hover:underline"
                  >
                    {link.label}
                  </a>
                </li>
              ))}
            </ul>
          </div>
          <div className="mt-6 text-sm leading-6 text-muted-foreground whitespace-nowrap lg:mt-0 lg:row-[1/3] lg:col-[1/4]">
            <div>{copyright.text}</div>
            <div>Made with ❤️ for the kendama community</div>
            {copyright.license && <div>{copyright.license}</div>}
          </div>
        </div>
      </div>
    </footer>
  )
}

================
File: components/ui/form.tsx
================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { Label } from "@/components/ui/label"
import { cn } from "@/lib/utils"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}

================
File: components/ui/header.tsx
================
"use client";

import { useState } from "react";
import { usePathname } from "next/navigation";
import { Button } from "./button";
import { ThemeToggle } from "./theme-toggle";
import { useAuth } from "@/auth/AuthContext";
import { SignInPage } from "./sign-in";
import { SignUpPage } from "./sign-up";
import { Dialog, DialogContent, DialogTrigger } from "./dialog";
import { supabase } from "@/lib/supabase";

interface NavigationItem {
    title: string;
    href?: string;
    description: string;
    items?: Array<{
        title: string;
        href: string;
    }>;
}
import {
    NavigationMenu,
    NavigationMenuContent,
    NavigationMenuItem,
    NavigationMenuLink,
    NavigationMenuList,
    NavigationMenuTrigger,
} from "./navigation-menu";
import { Menu, MoveRight, X } from "lucide-react";
import Link from "next/link";


function Header() {
    const { user } = useAuth();
    const pathname = usePathname();
    const [showSignIn, setShowSignIn] = useState(true);
    const navigationItems: NavigationItem[] = [
        {
            title: "Home",
            href: "/",
            description: "",
        },
        {
            title: "About",
            href: "/about",
            description: "",
        }
    ];

    const [isOpen, setOpen] = useState(false);
    return (
        <header className="w-full z-40 fixed top-0 left-0 bg-background border-b">
            <div className="container relative mx-auto h-20 flex gap-4 flex-row lg:grid lg:grid-cols-3 items-center px-4">
                <div className="justify-start items-center gap-4 lg:flex hidden flex-row">
                    <NavigationMenu className="flex justify-start items-start">
                        <NavigationMenuList className="flex justify-start gap-4 flex-row">
                            {navigationItems.map((item) => (
                                <NavigationMenuItem key={item.title}>
                                    {item.href ? (
                                        <>
                                            <Link href={item.href}>
                                                <Button variant="ghost">{item.title}</Button>
                                            </Link>
                                        </>
                                    ) : (
                                        <>
                                            <NavigationMenuTrigger className="font-medium text-sm">
                                                {item.title}
                                            </NavigationMenuTrigger>
                                            <NavigationMenuContent className="!w-[450px] p-4">
                                                <div className="flex flex-col lg:grid grid-cols-2 gap-4">
                                                    <div className="flex flex-col h-full justify-between">
                                                        <div className="flex flex-col">
                                                            <p className="text-base">{item.title}</p>
                                                            <p className="text-muted-foreground text-sm">
                                                                {item.description}
                                                            </p>
                                                        </div>
                                                        <Button size="sm" className="mt-10">
                                                            Book a call today
                                                        </Button>
                                                    </div>
                                                    <div className="flex flex-col text-sm h-full justify-end">
                                                        {item.items?.map((subItem) => (
                                                            <NavigationMenuLink
                                                                href={subItem.href}
                                                                key={subItem.title}
                                                                className="flex flex-row justify-between items-center hover:bg-muted py-2 px-4 rounded"
                                                            >
                                                                <span>{subItem.title}</span>
                                                                <MoveRight className="w-4 h-4 text-muted-foreground" />
                                                            </NavigationMenuLink>
                                                        ))}
                                                    </div>
                                                </div>
                                            </NavigationMenuContent>
                                        </>
                                    )}
                                </NavigationMenuItem>
                            ))}
                        </NavigationMenuList>
                    </NavigationMenu>
                </div>
                <div className="flex justify-center flex-1 lg:flex-none">
                    <Link href="/">
                        <p className="font-semibold text-xl cursor-pointer">Teach Niche</p>
                    </Link>
                </div>
                <div className="hidden lg:flex justify-end w-full gap-2 items-center">
                    <ThemeToggle />
                    <Link href="/about">
                        <Button variant="ghost">Learn More</Button>
                    </Link>
                    {user ? (
                        <Button 
                            variant="ghost"
                            onClick={async () => {
                                await supabase.auth.signOut();
                                window.location.href = '/';
                            }}
                        >
                            Sign Out
                        </Button>
                    ) : (
                        <>
                            <Dialog>
                                <DialogTrigger asChild>
                                    <Button variant="ghost">Sign In</Button>
                                </DialogTrigger>
                                <DialogContent className="p-0 bg-background">
                                    {showSignIn ? (
                                        <SignInPage onSwitchToSignUp={() => setShowSignIn(false)} />
                                    ) : (
                                        <SignUpPage onSwitchToSignIn={() => setShowSignIn(true)} />
                                    )}
                                </DialogContent>
                            </Dialog>
                            <Button 
                                onClick={() => {
                                    if (pathname === '/') {
                                        document.querySelector('#email-signup')?.scrollIntoView({ 
                                            behavior: 'smooth'
                                        });
                                    } else {
                                        window.location.href = '/#email-signup';
                                    }
                                }}
                            >
                                Join Teacher Waitlist <MoveRight className="w-4 h-4" />
                            </Button>
                        </>
                    )}
                </div>
                <div className="flex ml-auto lg:hidden">
                    <Button variant="ghost" onClick={() => setOpen(!isOpen)}>
                        {isOpen ? <X className="w-5 h-5" /> : <Menu className="w-5 h-5" />}
                    </Button>
                    {isOpen && (
                        <div className="absolute top-20 border-t flex flex-col w-full left-0 right-0 bg-background shadow-lg py-6 px-6 gap-6">
                            <div className="flex flex-col gap-4 mb-4">
                                <div className="flex justify-end">
                                    <ThemeToggle />
                                </div>
                                <Link href="/about">
                                    <Button variant="ghost" className="w-full">Learn More</Button>
                                </Link>
                                {user ? (
                                    <Button 
                                        variant="ghost"
                                        className="w-full"
                                        onClick={async () => {
                                            await supabase.auth.signOut();
                                            window.location.href = '/';
                                        }}
                                    >
                                        Sign Out
                                    </Button>
                                ) : (
                                    <>
                                        <Dialog>
                                            <DialogTrigger asChild>
                                                <Button variant="ghost" className="w-full">Sign In</Button>
                                            </DialogTrigger>
                                            <DialogContent className="p-0 bg-background">
                                                {showSignIn ? (
                                                    <SignInPage onSwitchToSignUp={() => setShowSignIn(false)} />
                                                ) : (
                                                    <SignUpPage onSwitchToSignIn={() => setShowSignIn(true)} />
                                                )}
                                            </DialogContent>
                                        </Dialog>
                                        <Button 
                                            className="w-full"
                                            onClick={() => {
                                                if (pathname === '/') {
                                                    document.querySelector('#email-signup')?.scrollIntoView({ 
                                                        behavior: 'smooth'
                                                    });
                                                } else {
                                                    window.location.href = '/#email-signup';
                                                }
                                            }}
                                        >
                                            Join Teacher Waitlist <MoveRight className="w-4 h-4" />
                                        </Button>
                                    </>
                                )}
                            </div>
                            {navigationItems.map((item) => (
                                <div key={item.title}>
                                    <div className="flex flex-col gap-2">
                                        {item.href ? (
                                            <Link
                                                href={item.href}
                                                className="flex justify-between items-center"
                                            >
                                                <span className="text-lg">{item.title}</span>
                                                <MoveRight className="w-4 h-4 stroke-1 text-muted-foreground" />
                                            </Link>
                                        ) : (
                                            <p className="text-lg">{item.title}</p>
                                        )}
                                        {item.items &&
                                            item.items.map((subItem) => (
                                                <Link
                                                    key={subItem.title}
                                                    href={subItem.href}
                                                    className="flex justify-between items-center"
                                                >
                                                    <span className="text-muted-foreground">
                                                        {subItem.title}
                                                    </span>
                                                    <MoveRight className="w-4 h-4 stroke-1" />
                                                </Link>
                                            ))}
                                    </div>
                                </div>
                            ))}
                        </div>
                    )}
                </div>
            </div>
        </header>
    );
}

export type { NavigationItem };
export { Header };

================
File: components/ui/icons.tsx
================
type IconProps = React.HTMLAttributes<SVGElement>

export const Icons = {
  logo: (props: IconProps) => (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 256" {...props}>
      <rect width="256" height="256" fill="none" />
      <line
        x1="208"
        y1="128"
        x2="128"
        y2="208"
        fill="none"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="32"
      />
      <line
        x1="192"
        y1="40"
        x2="40"
        y2="192"
        fill="none"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="32"
      />
    </svg>
  ),
  twitter: (props: IconProps) => (
    <svg
      {...props}
      height="23"
      viewBox="0 0 1200 1227"
      width="23"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path d="M714.163 519.284L1160.89 0H1055.03L667.137 450.887L357.328 0H0L468.492 681.821L0 1226.37H105.866L515.491 750.218L842.672 1226.37H1200L714.137 519.284H714.163ZM569.165 687.828L521.697 619.934L144.011 79.6944H306.615L611.412 515.685L658.88 583.579L1055.08 1150.3H892.476L569.165 687.854V687.828Z" />
    </svg>
  ),
  gitHub: (props: IconProps) => (
    <svg viewBox="0 0 438.549 438.549" {...props}>
      <path
        fill="currentColor"
        d="M409.132 114.573c-19.608-33.596-46.205-60.194-79.798-79.8-33.598-19.607-70.277-29.408-110.063-29.408-39.781 0-76.472 9.804-110.063 29.408-33.596 19.605-60.192 46.204-79.8 79.8C9.803 148.168 0 184.854 0 224.63c0 47.78 13.94 90.745 41.827 128.906 27.884 38.164 63.906 64.572 108.063 79.227 5.14.954 8.945.283 11.419-1.996 2.475-2.282 3.711-5.14 3.711-8.562 0-.571-.049-5.708-.144-15.417a2549.81 2549.81 0 01-.144-25.406l-6.567 1.136c-4.187.767-9.469 1.092-15.846 1-6.374-.089-12.991-.757-19.842-1.999-6.854-1.231-13.229-4.086-19.13-8.559-5.898-4.473-10.085-10.328-12.56-17.556l-2.855-6.57c-1.903-4.374-4.899-9.233-8.992-14.559-4.093-5.331-8.232-8.945-12.419-10.848l-1.999-1.431c-1.332-.951-2.568-2.098-3.711-3.429-1.142-1.331-1.997-2.663-2.568-3.997-.572-1.335-.098-2.43 1.427-3.289 1.525-.859 4.281-1.276 8.28-1.276l5.708.853c3.807.763 8.516 3.042 14.133 6.851 5.614 3.806 10.229 8.754 13.846 14.842 4.38 7.806 9.657 13.754 15.846 17.847 6.184 4.093 12.419 6.136 18.699 6.136 6.28 0 11.704-.476 16.274-1.423 4.565-.952 8.848-2.383 12.847-4.285 1.713-12.758 6.377-22.559 13.988-29.41-10.848-1.14-20.601-2.857-29.264-5.14-8.658-2.286-17.605-5.996-26.835-11.14-9.235-5.137-16.896-11.516-22.985-19.126-6.09-7.614-11.088-17.61-14.987-29.979-3.901-12.374-5.852-26.648-5.852-42.826 0-23.035 7.52-42.637 22.557-58.817-7.044-17.318-6.379-36.732 1.997-58.24 5.52-1.715 13.706-.428 24.554 3.853 10.85 4.283 18.794 7.952 23.84 10.994 5.046 3.041 9.089 5.618 12.135 7.708 17.705-4.947 35.976-7.421 54.818-7.421s37.117 2.474 54.823 7.421l10.849-6.849c7.419-4.57 16.18-8.758 26.262-12.565 10.088-3.805 17.802-4.853 23.134-3.138 8.562 21.509 9.325 40.922 2.279 58.24 15.036 16.18 22.559 35.787 22.559 58.817 0 16.178-1.958 30.497-5.853 42.966-3.9 12.471-8.941 22.457-15.125 29.979-6.191 7.521-13.901 13.85-23.131 18.986-9.232 5.14-18.182 8.85-26.84 11.136-8.662 2.286-18.415 4.004-29.263 5.146 9.894 8.562 14.842 22.077 14.842 40.539v60.237c0 3.422 1.19 6.279 3.572 8.562 2.379 2.279 6.136 2.95 11.276 1.995 44.163-14.653 80.185-41.062 108.068-79.226 27.88-38.161 41.825-81.126 41.825-128.906-.01-39.771-9.818-76.454-29.414-110.049z"
      ></path>
    </svg>
  ),
  radix: (props: IconProps) => (
    <svg viewBox="0 0 25 25" fill="none" {...props}>
      <path
        d="M12 25C7.58173 25 4 21.4183 4 17C4 12.5817 7.58173 9 12 9V25Z"
        fill="currentcolor"
      ></path>
      <path d="M12 0H4V8H12V0Z" fill="currentcolor"></path>
      <path
        d="M17 8C19.2091 8 21 6.20914 21 4C21 1.79086 19.2091 0 17 0C14.7909 0 13 1.79086 13 4C13 6.20914 14.7909 8 17 8Z"
        fill="currentcolor"
      ></path>
    </svg>
  ),
  aria: (props: IconProps) => (
    <svg role="img" viewBox="0 0 24 24" fill="currentColor" {...props}>
      <path d="M13.966 22.624l-1.69-4.281H8.122l3.892-9.144 5.662 13.425zM8.884 1.376H0v21.248zm15.116 0h-8.884L24 22.624Z" />
    </svg>
  ),
  npm: (props: IconProps) => (
    <svg viewBox="0 0 24 24" {...props}>
      <path
        d="M1.763 0C.786 0 0 .786 0 1.763v20.474C0 23.214.786 24 1.763 24h20.474c.977 0 1.763-.786 1.763-1.763V1.763C24 .786 23.214 0 22.237 0zM5.13 5.323l13.837.019-.009 13.836h-3.464l.01-10.382h-3.456L12.04 19.17H5.113z"
        fill="currentColor"
      />
    </svg>
  ),
  yarn: (props: IconProps) => (
    <svg viewBox="0 0 24 24" {...props}>
      <path
        d="M12 0C5.375 0 0 5.375 0 12s5.375 12 12 12 12-5.375 12-12S18.625 0 12 0zm.768 4.105c.183 0 .363.053.525.157.125.083.287.185.755 1.154.31-.088.468-.042.551-.019.204.056.366.19.463.375.477.917.542 2.553.334 3.605-.241 1.232-.755 2.029-1.131 2.576.324.329.778.899 1.117 1.825.278.774.31 1.478.273 2.015a5.51 5.51 0 0 0 .602-.329c.593-.366 1.487-.917 2.553-.931.714-.009 1.269.445 1.353 1.103a1.23 1.23 0 0 1-.945 1.362c-.649.158-.95.278-1.821.843-1.232.797-2.539 1.242-3.012 1.39a1.686 1.686 0 0 1-.704.343c-.737.181-3.266.315-3.466.315h-.046c-.783 0-1.214-.241-1.45-.491-.658.329-1.51.19-2.122-.134a1.078 1.078 0 0 1-.58-1.153 1.243 1.243 0 0 1-.153-.195c-.162-.25-.528-.936-.454-1.946.056-.723.556-1.367.88-1.71a5.522 5.522 0 0 1 .408-2.256c.306-.727.885-1.348 1.32-1.737-.32-.537-.644-1.367-.329-2.21.227-.602.412-.936.82-1.08h-.005c.199-.074.389-.153.486-.259a3.418 3.418 0 0 1 2.298-1.103c.037-.093.079-.185.125-.283.31-.658.639-1.029 1.024-1.168a.94.94 0 0 1 .328-.06zm.006.7c-.507.016-1.001 1.519-1.001 1.519s-1.27-.204-2.266.871c-.199.218-.468.334-.746.44-.079.028-.176.023-.417.672-.371.991.625 2.094.625 2.094s-1.186.839-1.626 1.881c-.486 1.144-.338 2.261-.338 2.261s-.843.732-.899 1.487c-.051.663.139 1.2.343 1.515.227.343.51.176.51.176s-.561.653-.037.931c.477.25 1.283.394 1.71-.037.31-.31.371-1.001.486-1.283.028-.065.12.111.209.199.097.093.264.195.264.195s-.755.324-.445 1.066c.102.246.468.403 1.066.398.222-.005 2.664-.139 3.313-.296.375-.088.505-.283.505-.283s1.566-.431 2.998-1.357c.917-.598 1.293-.76 2.034-.936.612-.148.57-1.098-.241-1.084-.839.009-1.575.44-2.196.825-1.163.718-1.742.672-1.742.672l-.018-.032c-.079-.13.371-1.293-.134-2.678-.547-1.515-1.413-1.881-1.344-1.997.297-.5 1.038-1.297 1.334-2.78.176-.899.13-2.377-.269-3.151-.074-.144-.732.241-.732.241s-.616-1.371-.788-1.483a.271.271 0 0 0-.157-.046z"
        fill="currentColor"
      />
    </svg>
  ),
  pnpm: (props: IconProps) => (
    <svg viewBox="0 0 24 24" {...props}>
      <path
        d="M0 0v7.5h7.5V0zm8.25 0v7.5h7.498V0zm8.25 0v7.5H24V0zM8.25 8.25v7.5h7.498v-7.5zm8.25 0v7.5H24v-7.5zM0 16.5V24h7.5v-7.5zm8.25 0V24h7.498v-7.5zm8.25 0V24H24v-7.5z"
        fill="currentColor"
      />
    </svg>
  ),
  react: (props: IconProps) => (
    <svg viewBox="0 0 24 24" {...props}>
      <path
        d="M14.23 12.004a2.236 2.236 0 0 1-2.235 2.236 2.236 2.236 0 0 1-2.236-2.236 2.236 2.236 0 0 1 2.235-2.236 2.236 2.236 0 0 1 2.236 2.236zm2.648-10.69c-1.346 0-3.107.96-4.888 2.622-1.78-1.653-3.542-2.602-4.887-2.602-.41 0-.783.093-1.106.278-1.375.793-1.683 3.264-.973 6.365C1.98 8.917 0 10.42 0 12.004c0 1.59 1.99 3.097 5.043 4.03-.704 3.113-.39 5.588.988 6.38.32.187.69.275 1.102.275 1.345 0 3.107-.96 4.888-2.624 1.78 1.654 3.542 2.603 4.887 2.603.41 0 .783-.09 1.106-.275 1.374-.792 1.683-3.263.973-6.365C22.02 15.096 24 13.59 24 12.004c0-1.59-1.99-3.097-5.043-4.032.704-3.11.39-5.587-.988-6.38-.318-.184-.688-.277-1.092-.278zm-.005 1.09v.006c.225 0 .406.044.558.127.666.382.955 1.835.73 3.704-.054.46-.142.945-.25 1.44-.96-.236-2.006-.417-3.107-.534-.66-.905-1.345-1.727-2.035-2.447 1.592-1.48 3.087-2.292 4.105-2.295zm-9.77.02c1.012 0 2.514.808 4.11 2.28-.686.72-1.37 1.537-2.02 2.442-1.107.117-2.154.298-3.113.538-.112-.49-.195-.964-.254-1.42-.23-1.868.054-3.32.714-3.707.19-.09.4-.127.563-.132zm4.882 3.05c.455.468.91.992 1.36 1.564-.44-.02-.89-.034-1.345-.034-.46 0-.915.01-1.36.034.44-.572.895-1.096 1.345-1.565zM12 8.1c.74 0 1.477.034 2.202.093.406.582.802 1.203 1.183 1.86.372.64.71 1.29 1.018 1.946-.308.655-.646 1.31-1.013 1.95-.38.66-.773 1.288-1.18 1.87-.728.063-1.466.098-2.21.098-.74 0-1.477-.035-2.202-.093-.406-.582-.802-1.204-1.183-1.86-.372-.64-.71-1.29-1.018-1.946.303-.657.646-1.313 1.013-1.954.38-.66.773-1.286 1.18-1.868.728-.064 1.466-.098 2.21-.098zm-3.635.254c-.24.377-.48.763-.704 1.16-.225.39-.435.782-.635 1.174-.265-.656-.49-1.31-.676-1.947.64-.15 1.315-.283 2.015-.386zm7.26 0c.695.103 1.365.23 2.006.387-.18.632-.405 1.282-.66 1.933-.2-.39-.41-.783-.64-1.174-.225-.392-.465-.774-.705-1.146zm3.063.675c.484.15.944.317 1.375.498 1.732.74 2.852 1.708 2.852 2.476-.005.768-1.125 1.74-2.857 2.475-.42.18-.88.342-1.355.493-.28-.958-.646-1.956-1.1-2.98.45-1.017.81-2.01 1.085-2.964zm-13.395.004c.278.96.645 1.957 1.1 2.98-.45 1.017-.812 2.01-1.086 2.964-.484-.15-.944-.318-1.37-.5-1.732-.737-2.852-1.706-2.852-2.474 0-.768 1.12-1.742 2.852-2.476.42-.18.88-.342 1.356-.494zm11.678 4.28c.265.657.49 1.312.676 1.948-.64.157-1.316.29-2.016.39.24-.375.48-.762.705-1.158.225-.39.435-.788.636-1.18zm-9.945.02c.2.392.41.783.64 1.175.23.39.465.772.705 1.143-.695-.102-1.365-.23-2.006-.386.18-.63.406-1.282.66-1.933zM17.92 16.32c.112.493.2.968.254 1.423.23 1.868-.054 3.32-.714 3.708-.147.09-.338.128-.563.128-1.012 0-2.514-.807-4.11-2.28.686-.72 1.37-1.536 2.02-2.44 1.107-.118 2.154-.3 3.113-.54zm-11.83.01c.96.234 2.006.415 3.107.532.66.905 1.345 1.727 2.035 2.446-1.595 1.483-3.092 2.295-4.11 2.295-.22-.005-.406-.05-.553-.132-.666-.38-.955-1.834-.73-3.703.054-.46.142-.944.25-1.438zm4.56.64c.44.02.89.034 1.345.034.46 0 .915-.01 1.36-.034-.44.572-.895 1.095-1.345 1.565-.455-.47-.91-.993-1.36-1.565z"
        fill="currentColor"
      />
    </svg>
  ),
  tailwind: (props: IconProps) => (
    <svg viewBox="0 0 24 24" {...props}>
      <path
        d="M12.001,4.8c-3.2,0-5.2,1.6-6,4.8c1.2-1.6,2.6-2.2,4.2-1.8c0.913,0.228,1.565,0.89,2.288,1.624 C13.666,10.618,15.027,12,18.001,12c3.2,0,5.2-1.6,6-4.8c-1.2,1.6-2.6,2.2-4.2,1.8c-0.913-0.228-1.565-0.89-2.288-1.624 C16.337,6.182,14.976,4.8,12.001,4.8z M6.001,12c-3.2,0-5.2,1.6-6,4.8c1.2-1.6,2.6-2.2,4.2-1.8c0.913,0.228,1.565,0.89,2.288,1.624 c1.177,1.194,2.538,2.576,5.512,2.576c3.2,0,5.2-1.6,6-4.8c-1.2,1.6-2.6,2.2-4.2,1.8c-0.913-0.228-1.565-0.89-2.288-1.624 C10.337,13.382,8.976,12,6.001,12z"
        fill="currentColor"
      />
    </svg>
  ),
  google: (props: IconProps) => (
    <svg role="img" viewBox="0 0 24 24" {...props}>
      <path
        fill="currentColor"
        d="M12.48 10.92v3.28h7.84c-.24 1.84-.853 3.187-1.787 4.133-1.147 1.147-2.933 2.4-6.053 2.4-4.827 0-8.6-3.893-8.6-8.72s3.773-8.72 8.6-8.72c2.6 0 4.507 1.027 5.907 2.347l2.307-2.307C18.747 1.44 16.133 0 12.48 0 5.867 0 .307 5.387.307 12s5.56 12 12.173 12c3.573 0 6.267-1.173 8.373-3.36 2.16-2.16 2.84-5.213 2.84-7.667 0-.76-.053-1.467-.173-2.053H12.48z"
      />
    </svg>
  ),
  apple: (props: IconProps) => (
    <svg role="img" viewBox="0 0 24 24" {...props}>
      <path
        d="M12.152 6.896c-.948 0-2.415-1.078-3.96-1.04-2.04.027-3.91 1.183-4.961 3.014-2.117 3.675-.546 9.103 1.519 12.09 1.013 1.454 2.208 3.09 3.792 3.039 1.52-.065 2.09-.987 3.935-.987 1.831 0 2.35.987 3.96.948 1.637-.026 2.676-1.48 3.676-2.948 1.156-1.688 1.636-3.325 1.662-3.415-.039-.013-3.182-1.221-3.22-4.857-.026-3.04 2.48-4.494 2.597-4.559-1.429-2.09-3.623-2.324-4.39-2.376-2-.156-3.675 1.09-4.61 1.09zM15.53 3.83c.843-1.012 1.4-2.427 1.245-3.83-1.207.052-2.662.805-3.532 1.818-.78.896-1.454 2.338-1.273 3.714 1.338.104 2.715-.688 3.559-1.701"
        fill="currentColor"
      />
    </svg>
  ),
  paypal: (props: IconProps) => (
    <svg role="img" viewBox="0 0 24 24" {...props}>
      <path
        d="M7.076 21.337H2.47a.641.641 0 0 1-.633-.74L4.944.901C5.026.382 5.474 0 5.998 0h7.46c2.57 0 4.578.543 5.69 1.81 1.01 1.15 1.304 2.42 1.012 4.287-.023.143-.047.288-.077.437-.983 5.05-4.349 6.797-8.647 6.797h-2.19c-.524 0-.968.382-1.05.9l-1.12 7.106zm14.146-14.42a3.35 3.35 0 0 0-.607-.541c-.013.076-.026.175-.041.254-.93 4.778-4.005 7.201-9.138 7.201h-2.19a.563.563 0 0 0-.556.479l-1.187 7.527h-.506l-.24 1.516a.56.56 0 0 0 .554.647h3.882c.46 0 .85-.334.922-.788.06-.26.76-4.852.816-5.09a.932.932 0 0 1 .923-.788h.58c3.76 0 6.705-1.528 7.565-5.946.36-1.847.174-3.388-.777-4.471z"
        fill="currentColor"
      />
    </svg>
  ),
  spinner: (props: IconProps) => (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
      {...props}
    >
      <path d="M21 12a9 9 0 1 1-6.219-8.56" />
    </svg>
  ),
}

================
File: components/ui/input.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

export type InputProps = React.InputHTMLAttributes<HTMLInputElement>

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

================
File: components/ui/label.tsx
================
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70",
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

================
File: components/ui/lesson-form.tsx
================
"use client";

import { cn } from "@/lib/utils";
import { useState } from "react";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import * as z from "zod";
import { Button } from "./button";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage, FormDescription } from "./form";
import { Input } from "./input";
import { Textarea } from "./textarea";
import { VideoUploader } from "./video-uploader";
import { toast } from "@/components/ui/use-toast";
import { Card } from "./card";
import { Loader2 } from "lucide-react";

const lessonFormSchema = z.object({
  title: z.string().min(1, "Title is required").max(100, "Title must be less than 100 characters"),
  description: z.string()
    .min(10, "Description must be at least 10 characters")
    .max(500, "Description must be less than 500 characters"),
  muxAssetId: z.string().optional(),
  price: z.number()
    .min(0, "Price must be positive")
    .max(999.99, "Price must be less than $1000")
    .optional(),
});

type LessonFormData = z.infer<typeof lessonFormSchema>;

interface LessonFormProps {
  initialData?: LessonFormData;
  onSubmit: (data: LessonFormData) => Promise<void>;
  isSubmitting?: boolean;
  className?: string;
}

export function LessonForm({ 
  initialData, 
  onSubmit,
  isSubmitting = false,
  className 
}: LessonFormProps) {
  const form = useForm<LessonFormData>({
    resolver: zodResolver(lessonFormSchema),
    defaultValues: initialData || {
      title: "",
      description: "",
      price: 0,
      muxAssetId: "", // Initialize muxAssetId field
    },
  });

  const [videoUploaded, setVideoUploaded] = useState(false);
  const hasVideo = videoUploaded || !!form.watch("muxAssetId");
  
  console.log("Form State:", {
    muxAssetId: form.watch("muxAssetId"),
    hasVideo,
    videoUploaded
  });

  return (
    <Form {...form}>
      <form 
        onSubmit={form.handleSubmit(onSubmit)} 
        className={cn("space-y-8", className)}
      >
        <div className="space-y-6">
          <FormField
            control={form.control}
            name="title"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Lesson Title</FormLabel>
                <FormControl>
                  <Input 
                    {...field} 
                    placeholder="Enter a clear, descriptive title"
                    disabled={isSubmitting}
                  />
                </FormControl>
                <FormDescription>
                  Choose a title that clearly describes what students will learn
                </FormDescription>
                <FormMessage />
              </FormItem>
            )}
          />

          <FormField
            control={form.control}
            name="description"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Description</FormLabel>
                <FormControl>
                  <Textarea 
                    {...field} 
                    placeholder="Describe what your lesson covers and what students will learn..."
                    className="resize-none"
                    rows={4}
                    disabled={isSubmitting}
                  />
                </FormControl>
                <FormDescription>
                  Provide a detailed description of your lesson content and learning outcomes
                </FormDescription>
                <FormMessage />
              </FormItem>
            )}
          />

          <FormField
            control={form.control}
            name="price"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Price (USD)</FormLabel>
                <FormControl>
                  <div className="relative">
                    <span className="absolute left-3 top-2.5 text-muted-foreground">$</span>
                    <Input 
                      type="number"
                      step="0.01"
                      min="0"
                      max="999.99"
                      className="pl-7"
                      {...field} 
                      onChange={e => field.onChange(parseFloat(e.target.value))}
                      disabled={isSubmitting}
                    />
                  </div>
                </FormControl>
                <FormDescription>
                  Set a fair price for your lesson content (leave at 0 for free)
                </FormDescription>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>

        <Card className="p-6">
          <div className="space-y-4">
            <div>
              <h3 className="font-semibold">Lesson Video</h3>
              <p className="text-sm text-muted-foreground">
                Upload your lesson video content
              </p>
            </div>
            
            <VideoUploader
              endpoint="/api/video/upload"
              onUploadComplete={(assetId) => {
                setVideoUploaded(true);
                form.setValue("muxAssetId", assetId, { 
                  shouldValidate: true,
                  shouldDirty: true,
                  shouldTouch: true
                });
                console.log("Asset ID set:", assetId);
                console.log("Form values after upload:", form.getValues());
                toast({
                  title: "Video uploaded",
                  description: "Your video has been uploaded successfully.",
                });
              }}
              onError={(error) => {
                toast({
                  title: "Upload failed",
                  description: error.message,
                  variant: "destructive",
                });
              }}
            />
          </div>
        </Card>

        <div className="flex justify-end">
          <Button 
            type="submit" 
            size="lg"
          >
            {isSubmitting && (
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
            )}
            {isSubmitting ? "Creating Lesson..." : "Create Lesson"}
          </Button>
        </div>
      </form>
    </Form>
  );
}

================
File: components/ui/navigation-menu.tsx
================
import * as React from "react"
import { ChevronDownIcon } from "@radix-ui/react-icons"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDownIcon
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-300 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}

================
File: components/ui/progress.tsx
================
"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }

================
File: components/ui/select.tsx
================
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className,
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className,
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className,
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className,
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]",
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}

================
File: components/ui/sign-in.tsx
================
import { useState } from 'react'
import { useRouter } from 'next/navigation'
import { Button } from './button'
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from './card'
import { Input } from './input'
import { Label } from './label'
import { Icons } from './icons'
import { signInWithEmail, signInWithGoogle } from '@/auth/supabaseAuth'
import { useAuth } from '@/auth/AuthContext'

interface SignInPageProps {
  onSwitchToSignUp: () => void;
}

function SignInPage({ onSwitchToSignUp }: SignInPageProps) {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const router = useRouter()
  const { user, loading } = useAuth()

  const handleSignIn = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsLoading(true)
    setError(null)

    try {
      await signInWithEmail(email, password)
      router.push('/')
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to sign in')
    } finally {
      setIsLoading(false)
    }
  }


  const handleGoogleSignIn = async () => {
    try {
      await signInWithGoogle()
      router.push('/')
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to sign in with Google')
    }
  }

  return (
    <>
      {loading ? (
        <div className="flex min-h-[inherit] w-full items-center justify-center">
          <div className="text-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 dark:border-white mx-auto mb-4"></div>
            <p>Loading...</p>
          </div>
        </div>
      ) : user ? (
        <>{router.push('/dashboard')}</>
      ) : (
        <div className="flex min-h-[inherit] w-full items-center justify-center p-6">
      <Card className="w-full max-w-[400px]">
        <CardHeader className="space-y-1">
          <CardTitle>Sign in to Teach Niche</CardTitle>
          <CardDescription>Welcome back! Please sign in to continue</CardDescription>
        </CardHeader>
        <CardContent className="grid gap-4">
          <form onSubmit={handleSignIn} className="grid gap-4">
            <div className="grid grid-cols-1 gap-4">
              <Button size="sm" variant="outline" type="button" className="h-7" onClick={handleGoogleSignIn}>
                <Icons.google className="mr-2 h-4 w-4" />
                Google
              </Button>
            </div>
          
          <div className="relative">
            <div className="absolute inset-0 flex items-center">
              <span className="w-full border-t" />
            </div>
            <div className="relative flex justify-center text-xs uppercase">
              <span className="bg-background px-2 text-muted-foreground">or continue with</span>
            </div>
          </div>
          
          <div className="space-y-2">
            <Label htmlFor="email">Email address</Label>
            <Input 
              id="email" 
              type="email" 
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required 
            />
          </div>
          
          <div className="space-y-2">
            <Label htmlFor="password">Password</Label>
            <Input 
              id="password" 
              type="password" 
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required 
            />
          </div>
          
          {error && (
            <p className="text-sm text-red-500">{error}</p>
          )}
          <Button className="w-full mt-4" type="submit" disabled={isLoading}>
            {isLoading ? "Signing in..." : "Sign in"}
          </Button>
          </form>
        </CardContent>

        <CardFooter className="flex flex-col space-y-4">
          <Button 
            variant="link" 
            size="sm" 
            className="w-full"
            onClick={onSwitchToSignUp}
          >
            Don&apos;t have an account? Sign up
          </Button>
        </CardFooter>
      </Card>
        </div>
      )}
    </>
  )
}

export { SignInPage };

================
File: components/ui/sign-up.tsx
================
import { useState } from 'react'
import { useRouter } from 'next/navigation'
import { Button } from '@/components/ui/button'
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Icons } from '@/components/ui/icons'
import { signUp, signInWithGoogle } from '@/auth/supabaseAuth'
import { useAuth } from '@/auth/AuthContext'

interface SignUpPageProps {
  onSwitchToSignIn: () => void;
}

function SignUpPage({ onSwitchToSignIn }: SignUpPageProps) {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const router = useRouter()
  const { loading, user } = useAuth()

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsLoading(true)
    setError(null)

    try {
      await signUp(email, password)
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to sign up')
      setIsLoading(false)
      return
    }

    // Successful signup
    router.push('/') // or wherever you want to redirect
  }


  const handleGoogleSignIn = async () => {
    setIsLoading(true)
    setError(null)
    const { error } = await signInWithGoogle()
    if (error) {
      setError(error instanceof Error ? error.message : 'Failed to sign in with Google')
    }
    setIsLoading(false)
  }

  return (
    <>
      {loading ? (
        <div className="flex min-h-[inherit] w-full items-center justify-center">
          <div className="text-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 dark:border-white mx-auto mb-4"></div>
            <p>Loading...</p>
          </div>
        </div>
      ) : user ? (
        <>{router.push('/')}</>
      ) : (
        <div className="flex min-h-[inherit] w-full items-center justify-center p-6">
      <form onSubmit={handleSubmit}>
        <Card className="w-full max-w-[400px]">
        <CardHeader className="space-y-1">
          <CardTitle>Join Teach Niche</CardTitle>
          <CardDescription>
            Create an account to get started with Teach Niche
          </CardDescription>
        </CardHeader>
        <CardContent className="grid gap-4">
          <div className="grid grid-cols-1 gap-4">
            <Button 
              size="sm" 
              variant="outline" 
              type="button" 
              className="h-7"
              onClick={handleGoogleSignIn}
              disabled={isLoading}
            >
              <Icons.google className="mr-2 h-4 w-4" />
              Google
            </Button>
          </div>
          
          <div className="relative">
            <div className="absolute inset-0 flex items-center">
              <span className="w-full border-t" />
            </div>
            <div className="relative flex justify-center text-xs uppercase">
              <span className="bg-background px-2 text-muted-foreground">or continue with</span>
            </div>
          </div>
          
          <div className="space-y-2">
            <Label htmlFor="email">Email address</Label>
            <Input 
              id="email" 
              type="email" 
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required 
            />
          </div>
          
          <div className="space-y-2">
            <Label htmlFor="password">Password</Label>
            <Input 
              id="password" 
              type="password" 
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required 
            />
          </div>
        </CardContent>
        
        <CardFooter className="flex flex-col space-y-4">
          {error && (
            <p className="text-sm text-red-500">{error}</p>
          )}
          <Button 
            type="submit" 
            className="w-full"
            disabled={isLoading}
          >
            {isLoading ? "Loading..." : "Continue"}
          </Button>
          <Button 
            variant="link" 
            size="sm" 
            className="w-full"
            onClick={onSwitchToSignIn}
          >
            Already have an account? Sign in
          </Button>
        </CardFooter>
      </Card>
      </form>
        </div>
      )}
    </>
  )
}

export { SignUpPage };

================
File: components/ui/switch.tsx
================
"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className,
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0",
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }

================
File: components/ui/textarea.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

export type TextareaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement>

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }

================
File: components/ui/theme-toggle.tsx
================
"use client"

import * as React from "react"
import { Moon, Sun } from "lucide-react"
import { useTheme } from "next-themes"
import { Button } from "@/components/ui/button"

export function ThemeToggle() {
  const { theme, setTheme } = useTheme()

  return (
    <Button
      variant="ghost"
      size="icon"
      onClick={() => setTheme(theme === "light" ? "dark" : "light")}
      aria-label="Toggle theme"
    >
      <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
      <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
    </Button>
  )
}

================
File: components/ui/toast.tsx
================
"use client"

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}

================
File: components/ui/toaster.tsx
================
"use client"

import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"
import { useToast } from "@/components/ui/use-toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}

================
File: components/ui/use-toast.tsx
================
// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

type ActionType = {
  ADD_TOAST: "ADD_TOAST"
  UPDATE_TOAST: "UPDATE_TOAST"
  DISMISS_TOAST: "DISMISS_TOAST"
  REMOVE_TOAST: "REMOVE_TOAST"
}

const actionTypes: ActionType = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
}

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_VALUE
  return count.toString()
}

type Action =
  | {
      type: typeof actionTypes.ADD_TOAST
      toast: ToasterToast
    }
  | {
      type: typeof actionTypes.UPDATE_TOAST
      toast: Partial<ToasterToast>
    }
  | {
      type: typeof actionTypes.DISMISS_TOAST
      toastId?: ToasterToast["id"]
    }
  | {
      type: typeof actionTypes.REMOVE_TOAST
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: actionTypes.REMOVE_TOAST,
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case actionTypes.ADD_TOAST:
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case actionTypes.UPDATE_TOAST:
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case actionTypes.DISMISS_TOAST: {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case actionTypes.REMOVE_TOAST:
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: actionTypes.UPDATE_TOAST,
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: actionTypes.ADD_TOAST,
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

================
File: components/ui/video-player.tsx
================
"use client";

import { cn } from "@/lib/utils";
import MuxPlayer from "@mux/mux-player-react";

interface VideoPlayerProps {
  playbackId: string;
  title: string;
  className?: string;
  id?: string;
}

export function VideoPlayer({ 
  playbackId, 
  title, 
  className,
  id
}: VideoPlayerProps) {
  return (
    <div className={cn("aspect-video rounded-lg overflow-hidden", className)}>
      <MuxPlayer
        id={id}
        playbackId={playbackId}
        metadata={{ 
          video_title: title,
        }}
        streamType="on-demand"
        autoPlay="muted"
      />
    </div>
  );
}

================
File: components/ui/video-status.tsx
================
"use client";

import { cn } from "@/lib/utils";
import { AlertCircle, CheckCircle2, Loader2 } from "lucide-react";

interface VideoStatusProps {
  status: 'pending' | 'processing' | 'ready' | 'error';
  error?: string;
  className?: string;
}

export function VideoStatus({ 
  status, 
  error, 
  className 
}: VideoStatusProps) {
  return (
    <div className={cn("flex items-center gap-2", className)}>
      {status === 'pending' && (
        <>
          <Loader2 className="h-4 w-4 animate-spin text-muted-foreground" />
          <span className="text-sm text-muted-foreground">Waiting to process...</span>
        </>
      )}
      
      {status === 'processing' && (
        <>
          <Loader2 className="h-4 w-4 animate-spin text-blue-500" />
          <span className="text-sm text-blue-500">Processing video...</span>
        </>
      )}
      
      {status === 'ready' && (
        <>
          <CheckCircle2 className="h-4 w-4 text-green-500" />
          <span className="text-sm text-green-500">Video ready</span>
        </>
      )}
      
      {status === 'error' && (
        <>
          <AlertCircle className="h-4 w-4 text-destructive" />
          <span className="text-sm text-destructive">
            {error || 'Error processing video'}
          </span>
        </>
      )}
    </div>
  );
}

================
File: components/ui/video-uploader.tsx
================
"use client";

import { cn } from "@/lib/utils";
import MuxUploader from "@mux/mux-uploader-react";
import { useState, useEffect } from "react";
import { Button } from "./button";
import { Progress } from "./progress";
import { AlertCircle, CheckCircle2, Upload } from "lucide-react";

interface VideoUploaderProps {
  endpoint: string | (() => Promise<string>);
  onUploadComplete: (assetId: string) => void;
  onError: (error: Error) => void;
  maxSizeMB?: number;
  acceptedTypes?: string[];
  className?: string;
  pausable?: boolean;
  noDrop?: boolean;
  chunkSize?: number;
  dynamicChunkSize?: boolean;
  useLargeFileWorkaround?: boolean;
}

type UploadStatus = 'idle' | 'uploading' | 'processing' | 'ready' | 'error';

interface MuxUploadEvent extends CustomEvent {
  detail: {
    file?: File;
    loaded?: number;
    total?: number;
    status?: 'starting' | 'uploading' | 'processing' | 'complete' | 'errored';
    assetId?: string;
    message?: string;
    error?: {
      type: string;
      message: string;
    };
  };
}

export function VideoUploader({ 
  endpoint,
  onUploadComplete, 
  onError,
  maxSizeMB = 500,
  acceptedTypes = ['video/mp4', 'video/quicktime'],
  className,
  pausable = false,
  noDrop = false,
  chunkSize,
  dynamicChunkSize = false,
  useLargeFileWorkaround = false
}: VideoUploaderProps) {
  const [status, setStatus] = useState<UploadStatus>('idle');
  const [progress, setProgress] = useState(0);
  const [errorMessage, setErrorMessage] = useState<string>('');

  const handleError = (error: Error) => {
    setStatus('error');
    setErrorMessage(error.message);
    onError(error);
  };

  const validateFile = (file: File) => {
    if (file.size > maxSizeMB * 1024 * 1024) {
      throw new Error(`File size must be less than ${maxSizeMB}MB`);
    }
    if (!acceptedTypes.includes(file.type)) {
      throw new Error(`File type must be one of: ${acceptedTypes.join(', ')}`);
    }
  };

  const [uploadEndpoint, setUploadEndpoint] = useState<string | undefined>();

  // First step: Get the Mux upload URL from our API
  const getUploadUrl = async () => {
    const response = await fetch(typeof endpoint === 'string' ? endpoint : await endpoint(), {
      method: 'POST'
    });
    
    if (!response.ok) {
      throw new Error('Failed to get upload URL');
    }

    const data = await response.json();
    return data.url;
  };

  // Fetch endpoint URL when component mounts if it's a function
  useEffect(() => {
    getUploadUrl()
      .then(setUploadEndpoint)
      .catch(error => {
        handleError(new Error('Failed to get upload URL'));
      });
  }, [endpoint]);

  const handleUploadStart = async (event: MuxUploadEvent) => {
    try {
      if (!event.detail.file) {
        throw new Error('No file selected');
      }

      if (!uploadEndpoint) {
        throw new Error('Upload URL not available. Please try again.');
      }
      
      console.log('handleUploadStart called with endpoint:', uploadEndpoint);
      
      validateFile(event.detail.file);
      
      setStatus('uploading');
      setProgress(0);
      setErrorMessage('');
    } catch (error) {
      handleError(error instanceof Error ? error : new Error('Invalid file'));
    }
  };

  const handleProgress = (event: MuxUploadEvent) => {
    if (event.detail.loaded && event.detail.total) {
      const percent = Math.round((event.detail.loaded / event.detail.total) * 100);
      setProgress(percent);
    }
  };

  const handleSuccess = (event: MuxUploadEvent) => {
    console.log('Upload success event:', event);
    
    if (!event.detail) {
      // This is the initial success event, indicating upload is complete
      console.log('Initial success event - upload complete');
      setStatus('processing');
      
      // Extract asset ID from the upload URL
      const url = new URL(uploadEndpoint || '');
      const uploadId = url.searchParams.get('upload_id');
      if (uploadId) {
        console.log('Found upload ID:', uploadId);
        // Use upload ID as temporary asset ID
        onUploadComplete(uploadId);
        setStatus('ready');
      }
      return;
    }
    
    // Handle subsequent events with detail
    const { status, assetId } = event.detail;
    console.log('Detail event - Status:', status, 'Asset ID:', assetId);
    
    if (status === 'complete' && assetId) {
      setStatus('ready');
      onUploadComplete(assetId);
    } else if (status === 'processing') {
      setStatus('processing');
    } else {
      console.log('Unexpected status:', status);
    }
  };

  const handleUploadError = (event: MuxUploadEvent) => {
    const { message, error } = event.detail;
    console.error('Upload error:', event.detail);
    
    if (error?.type === 'size_exceeded') {
      handleError(new Error(`File size exceeds the ${maxSizeMB}MB limit`));
    } else if (error?.type === 'format_unsupported') {
      handleError(new Error(`File format not supported. Accepted formats: ${acceptedTypes.join(', ')}`));
    } else if (error?.type === 'server_error') {
      handleError(new Error('Server error occurred. Please try again later.'));
    } else {
      handleError(new Error(message || 'Upload failed'));
    }
  };

  console.log('Current uploadEndpoint:', uploadEndpoint);
  console.log('Current status:', status);

  return (
    <div className={cn("relative space-y-4", className)}>
      <MuxUploader
        className="mux-uploader"
        endpoint={uploadEndpoint}
        onUploadStart={handleUploadStart}
        onProgress={handleProgress}
        onSuccess={handleSuccess}
        onError={handleUploadError}
        pausable={pausable}
        noDrop={noDrop}
        maxFileSize={maxSizeMB ? maxSizeMB * 1024 * 1024 : undefined}
        chunkSize={chunkSize}
        dynamicChunkSize={dynamicChunkSize}
        useLargeFileWorkaround={useLargeFileWorkaround}
        accept={acceptedTypes.join(',')}
        multiple={false}
      >
        {status === 'idle' && (
          <Button type="button" className="gap-2">
            <Upload className="h-4 w-4" />
            Upload Video
          </Button>
        )}
      </MuxUploader>

      {status !== 'idle' && (
        <Progress value={progress} className="w-full" />
      )}

      <div className="flex items-center gap-2 text-sm">
        {status === 'error' && <AlertCircle className="h-4 w-4 text-destructive" />}
        {status === 'ready' && <CheckCircle2 className="h-4 w-4 text-primary" />}
        <p className="text-muted-foreground">
          {status === 'uploading' && `Uploading... ${progress}%`}
          {status === 'processing' && 'Processing video...'}
          {status === 'ready' && 'Upload complete!'}
          {status === 'error' && (errorMessage || 'Upload failed. Please try again.')}
        </p>
      </div>

      <p className="text-xs text-muted-foreground">
        Accepted formats: {acceptedTypes.join(', ')} (max {maxSizeMB}MB)
      </p>
    </div>
  );
}

================
File: components/providers.tsx
================
"use client"

import * as React from "react"
import { ThemeProvider as NextThemesProvider } from "next-themes"
import { AuthProvider } from "@/auth/AuthContext"

type ThemeProviderProps = Parameters<typeof NextThemesProvider>[0]

export function Providers({ children, ...props }: ThemeProviderProps) {
  const [mounted, setMounted] = React.useState(false)

  React.useEffect(() => {
    setMounted(true)
  }, [])

  if (!mounted) {
    return null
  }

  return (
    <NextThemesProvider {...props}>
      <AuthProvider>
        {children}
      </AuthProvider>
    </NextThemesProvider>
  )
}

================
File: lib/mux.ts
================
import Mux from '@mux/mux-node';

// Validate environment variables at startup
if (!process.env.MUX_TOKEN_ID || !process.env.MUX_TOKEN_SECRET) {
  throw new Error('Missing required Mux environment variables');
}

// Initialize Mux client
const muxClient = new Mux({
  tokenId: process.env.MUX_TOKEN_ID,
  tokenSecret: process.env.MUX_TOKEN_SECRET
});

const { video: Video } = muxClient;
export { Video };

export interface MuxUploadResponse {
  url: string;
  id: string;
}

interface MuxError {
  message: string;
  type: string;
}

export interface MuxAssetResponse {
  id: string;
  status: 'preparing' | 'ready' | 'errored';
  playbackId?: string;
  error?: MuxError;
}

/**
 * Creates a new direct upload URL for Mux
 */
export async function createUpload(): Promise<MuxUploadResponse> {
  const corsOrigin = process.env.NEXT_PUBLIC_BASE_URL || '*';

  try {
    const upload = await Video.uploads.create({
      new_asset_settings: {
        playback_policy: ['public'],
        encoding_tier: 'baseline',
      },
      cors_origin: corsOrigin,
    });

    if (!upload?.url || !upload?.id) {
      throw new Error('Invalid upload response from Mux');
    }

    return {
      url: upload.url,
      id: upload.id
    };
  } catch (error) {
    throw new Error(
      error instanceof Error 
        ? `Failed to initialize Mux upload: ${error.message}`
        : 'Failed to initialize Mux upload'
    );
  }
}

/**
 * Checks the status of a Mux asset
 */
export async function getAssetStatus(assetId: string): Promise<MuxAssetResponse> {
  try {
    const asset = await Video.assets.retrieve(assetId);
    
    return {
      id: asset.id,
      status: asset.status,
      playbackId: asset.playback_ids?.[0]?.id,
      error: undefined // Simplified error handling
    };
  } catch (error) {
    throw new Error(
      error instanceof Error
        ? `Failed to get asset status: ${error.message}`
        : 'Failed to get asset status'
    );
  }
}

================
File: lib/supabase.ts
================
import { createClient } from '@supabase/supabase-js'

if (!process.env.NEXT_PUBLIC_SUPABASE_URL) {
  throw new Error('Missing env.NEXT_PUBLIC_SUPABASE_URL')
}
if (!process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {
  throw new Error('Missing env.NEXT_PUBLIC_SUPABASE_ANON_KEY')
}

export const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
)

================
File: lib/utils.ts
================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
.aider*

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

================
File: env.template
================
# Required Supabase configuration
NEXT_PUBLIC_SUPABASE_URL=https://your-project-ref.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-anon-key-from-supabase-dashboard
SUPABASE_SERVICE_KEY=your-service-key-from-supabase-dashboard

# Required Stripe configuration
STRIPE_SECRET_KEY=your-stripe-secret-key
STRIPE_WEBHOOK_SECRET=your-webhook-secret
STRIPE_PUBLISHABLE_KEY=your-publishable-key

# Optional configuration
NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=your_publishable_key

# Vimeo
VIMEO_CLIENT_ID=your-client-id
VIMEO_CLIENT_SECRET=your-client-secret
VIMEO_ACCESS_TOKEN=your-access-token

================
File: eslint.config.mjs
================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;

================
File: jest.config.js
================
const nextJest = require('next/jest')

const createJestConfig = nextJest({
  dir: './',
})

const config = {
  setupFilesAfterEnv: ['<rootDir>/jest.setup.ts'],
  testEnvironment: 'jest-environment-jsdom',
  moduleNameMapper: {
    '^@/(.*)$': '<rootDir>/$1',
  },
  transformIgnorePatterns: [
    'node_modules/(?!(lucide-react|@lucide)/)'
  ],
  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json', 'node'],
  testMatch: ['**/__tests__/**/*.test.ts?(x)'],
  collectCoverageFrom: [
    'app/**/*.{js,jsx,ts,tsx}',
    'components/**/*.{js,jsx,ts,tsx}',
    'lib/**/*.{js,jsx,ts,tsx}',
    '!**/*.d.ts',
    '!**/node_modules/**',
  ],
}

module.exports = createJestConfig(config)

================
File: jest.config.ts
================
const nextJest = require('next/jest')

const createJestConfig = nextJest({
  dir: './',
})

const config = {
  setupFilesAfterEnv: ['<rootDir>/jest.setup.ts'],
  testEnvironment: 'jest-environment-jsdom',
  moduleNameMapper: {
    '^@/(.*)$': '<rootDir>/$1',
  },
  testMatch: ['**/__tests__/**/*.test.ts?(x)'],
  collectCoverageFrom: [
    'app/**/*.{js,jsx,ts,tsx}',
    'components/**/*.{js,jsx,ts,tsx}',
    'lib/**/*.{js,jsx,ts,tsx}',
    '!**/*.d.ts',
    '!**/node_modules/**',
  ],
}

module.exports = createJestConfig(config)

================
File: jest.setup.ts
================
import '@testing-library/jest-dom'
import { jest } from '@jest/globals'

// Mock window.matchMedia
Object.defineProperty(window, 'matchMedia', {
  writable: true,
  value: jest.fn().mockImplementation(query => ({
    matches: false,
    media: query,
    onchange: null,
    addListener: jest.fn(),
    removeListener: jest.fn(),
    addEventListener: jest.fn(),
    removeEventListener: jest.fn(),
    dispatchEvent: jest.fn(),
  })),
})

// Mock lucide-react icons
jest.mock('lucide-react', () => ({
  BookOpen: () => 'BookOpen',
  DollarSign: () => 'DollarSign',
  Users: () => 'Users',
  Shield: () => 'Shield',
  Leaf: () => 'Leaf',
  GraduationCap: () => 'GraduationCap'
}))

// Mock next/font
jest.mock('next/font/google', () => ({
  Geist: () => ({
    variable: '--font-geist-sans',
    subsets: ['latin'],
  }),
  Geist_Mono: () => ({
    variable: '--font-geist-mono',
    subsets: ['latin'],
  }),
}))

// Mock next/image
jest.mock('next/image', () => ({
  __esModule: true,
  default: (props: any) => {
    // eslint-disable-next-line jsx-a11y/alt-text, @next/next/no-img-element
    return `<img ${Object.entries(props)
      .map(([key, value]) => `${key}="${value}"`)
      .join(' ')}/>`
  },
}))

================
File: next.config.ts
================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;

================
File: package.json
================
{
  "name": "teach-niche",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage"
  },
  "dependencies": {
    "@hookform/resolvers": "^4.1.0",
    "@mux/mux-node": "^9.0.1",
    "@mux/mux-player-react": "^3.3.0",
    "@mux/mux-uploader-react": "^1.1.2",
    "@radix-ui/react-accordion": "^1.2.3",
    "@radix-ui/react-checkbox": "^1.1.4",
    "@radix-ui/react-dialog": "^1.1.6",
    "@radix-ui/react-dropdown-menu": "^2.1.6",
    "@radix-ui/react-icons": "^1.3.2",
    "@radix-ui/react-label": "^2.1.2",
    "@radix-ui/react-navigation-menu": "^1.2.5",
    "@radix-ui/react-progress": "^1.1.2",
    "@radix-ui/react-select": "^2.1.6",
    "@radix-ui/react-slot": "^1.1.2",
    "@radix-ui/react-switch": "^1.1.3",
    "@radix-ui/react-toast": "^1.2.6",
    "@stripe/stripe-js": "^5.6.0",
    "@supabase/auth-helpers-nextjs": "^0.10.0",
    "@supabase/supabase-js": "^2.48.1",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "framer-motion": "^12.4.2",
    "lucide-react": "^0.475.0",
    "motion": "^12.4.2",
    "next": "^15.1.7",
    "next-themes": "^0.4.4",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-hook-form": "^7.54.2",
    "tailwind-merge": "^3.0.1",
    "tailwindcss-animate": "^1.0.7",
    "zod": "^3.24.2"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@jest/globals": "^29.7.0",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.1.0",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: README.md
================
# Teach Niche

A modern platform for educators to create and monetize their educational content. Built with Next.js, TypeScript, and Supabase.

## Features

- 🎥 Video course hosting and management via Vimeo integration
- 💰 Secure payments and creator payouts with Stripe Connect
- 🔐 Authentication and user management
- 📱 Responsive, modern UI built with Shadcn UI
- 🎨 Fully customizable theming
- ⚡ Server-side rendering for optimal performance

## Tech Stack

- **Framework:** Next.js 14 with App Router
- **Language:** TypeScript
- **Styling:** Tailwind CSS
- **UI Components:** Shadcn UI
- **Database & Auth:** Supabase
- **Video Platform:** Vimeo
- **Payments:** Stripe Connect
- **Deployment:** Vercel

## Getting Started

1. Clone the repository:
```bash
git clone https://github.com/your-username/teach-niche.git
cd teach-niche
```

2. Install dependencies:
```bash
npm install
```

3. Copy the environment template and fill in your values:
```bash
cp env.template .env.local
```

4. Start the development server:
```bash
npm run dev
```

Visit [http://localhost:3000](http://localhost:3000) to see the application.

## Environment Variables

Required environment variables:

- `NEXT_PUBLIC_SUPABASE_URL`: Your Supabase project URL
- `NEXT_PUBLIC_SUPABASE_ANON_KEY`: Supabase anonymous key
- `STRIPE_SECRET_KEY`: Stripe secret key
- `VIMEO_ACCESS_TOKEN`: Vimeo API access token

See `env.template` for all required variables.

## Development Guidelines

Please refer to `ai_docs/DEVELOPER_GUIDELINES.md` for detailed development standards and best practices.

## Testing

Run the test suite:
```bash
npm test
```

## Deployment

The application is automatically deployed to Vercel on push to the main branch.

## Contributing

1. Fork the repository
2. Create your feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add some amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

## License

This project is proprietary software. All rights reserved.

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";

export default {
    darkMode: ["class"],
    content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
  	extend: {
  		colors: {
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			}
  		},
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		}
  	}
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config;

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

================
File: vercel.json
================
{
  "version": 2,
  "builds": [
    {
      "src": "package.json",
      "use": "@vercel/next"
    }
  ],
  "devCommand": "next dev"
}



================================================================
End of Codebase
================================================================
